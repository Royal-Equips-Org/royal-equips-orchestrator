{"version":3,"file":"AgentsModule-GLFni06V.js","sources":["../../apps/command-center-ui/node_modules/lucide-react/dist/esm/icons/pause.js","../../apps/command-center-ui/node_modules/lucide-react/dist/esm/icons/plus.js","../../apps/command-center-ui/node_modules/lucide-react/dist/esm/icons/square.js","../../apps/command-center-ui/src/modules/agents/AgentsModule.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Pause = createLucideIcon(\"Pause\", [\n  [\"rect\", { x: \"14\", y: \"4\", width: \"4\", height: \"16\", rx: \"1\", key: \"zuxfzm\" }],\n  [\"rect\", { x: \"6\", y: \"4\", width: \"4\", height: \"16\", rx: \"1\", key: \"1okwgv\" }]\n]);\n\nexport { Pause as default };\n//# sourceMappingURL=pause.js.map\n","/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Plus = createLucideIcon(\"Plus\", [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"M12 5v14\", key: \"s699le\" }]\n]);\n\nexport { Plus as default };\n//# sourceMappingURL=plus.js.map\n","/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Square = createLucideIcon(\"Square\", [\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"3\", rx: \"2\", key: \"afitv7\" }]\n]);\n\nexport { Square as default };\n//# sourceMappingURL=square.js.map\n","import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  Users, \n  Activity, \n  Play, \n  Pause, \n  Square,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Cpu,\n  Zap,\n  MessageSquare,\n  Settings,\n  Plus\n} from 'lucide-react';\nimport { useEmpireStore } from '../../store/empire-store';\nimport { ensureArray } from '../../utils/array-utils';\nimport { logger } from '../../services/log';\n\ninterface Agent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'error' | 'stopped';\n  health: number;\n  lastActivity: string;\n  totalTasks: number;\n  completedTasks: number;\n  errorCount: number;\n  performance: {\n    avgResponseTime: number;\n    successRate: number;\n    throughput: number;\n  };\n  capabilities: string[];\n}\n\ninterface AgentSession {\n  id: string;\n  status: string;\n  created_at: string;\n}\n\nexport default function AgentsModule() {\n  const [agents, setAgents] = useState<Agent[]>([]);\n  const [sessions, setSessions] = useState<AgentSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n  const { isConnected } = useEmpireStore();\n\n  // Business logic validation for agents data\n  const normalizeAgentPayload = (rawData: unknown): Record<string, unknown>[] => {\n    const collections: unknown[] = [];\n\n    const agentLike = (candidate: unknown): candidate is Record<string, unknown> => {\n      if (!candidate || typeof candidate !== 'object') {\n        return false;\n      }\n\n      const record = candidate as Record<string, unknown>;\n      const identifier = record.id ?? record.agent_id ?? record.uuid ?? record.slug;\n      const status = record.status ?? record.agent_status;\n      const agentType = record.type ?? record.agent_type;\n\n      if (typeof identifier !== 'string' || identifier.length === 0) {\n        return false;\n      }\n\n      if (\n        typeof status !== 'string' &&\n        typeof agentType !== 'string' &&\n        typeof record.name !== 'string'\n      ) {\n        return false;\n      }\n\n      return true;\n    };\n\n    // Handle plain array response (e.g., [agent1, agent2])\n    if (Array.isArray(rawData)) {\n      collections.push(...rawData);\n    } else if (rawData && typeof rawData === 'object') {\n      const payload = rawData as Record<string, unknown>;\n\n      if (Array.isArray(payload.agents)) {\n        collections.push(...payload.agents);\n      }\n\n      if (Array.isArray(payload.data)) {\n        collections.push(...payload.data);\n      }\n\n      if (typeof payload.data === 'object' && payload.data !== null) {\n        const nested = payload.data as Record<string, unknown>;\n        if (Array.isArray(nested.agents)) {\n          collections.push(...nested.agents);\n        }\n        if (Array.isArray(nested.results)) {\n          collections.push(...nested.results);\n        }\n      }\n\n      if (Array.isArray(payload.results)) {\n        collections.push(...payload.results);\n      }\n\n      // If no arrays found but the payload itself looks like an agent, use it\n      if (collections.length === 0 && agentLike(payload)) {\n        collections.push(payload);\n      }\n    }\n\n    return collections.filter((candidate): candidate is Record<string, unknown> => agentLike(candidate));\n  };\n\n  const validateAndProcessAgentsData = (rawData: unknown): Record<string, unknown>[] => {\n    if (!rawData || typeof rawData !== 'object') {\n      logger.warn('Agents data invalid type, triggering fallback', {\n        event: 'AGENTS_DATA_INVALID',\n        rawData: typeof rawData,\n        context: 'AgentsModule.validateAndProcessAgentsData'\n      });\n      return [];\n    }\n\n    const agentsArray = normalizeAgentPayload(rawData);\n\n    if (agentsArray.length === 0) {\n      logger.warn('No agents data available, triggering empty state recovery', {\n        event: 'AGENTS_DATA_EMPTY',\n        rawData,\n        context: 'AgentsModule.validateAndProcessAgentsData'\n      });\n      return [];\n    }\n\n    logger.info('Successfully processed agents data', {\n      event: 'AGENTS_DATA_PROCESSED',\n      count: agentsArray.length,\n      context: 'AgentsModule.validateAndProcessAgentsData'\n    });\n\n    return agentsArray;\n  };\n\n  // Autonomous self-healing service layer for agent data fetching\n  const fetchAgentDataWithRecovery = async (retryCount = 0): Promise<void> => {\n    const maxRetries = 3;\n    const retryDelay = Math.pow(2, retryCount) * 1000; // Exponential backoff\n    \n    try {\n      logger.info('Starting agent data fetch', { \n        event: 'AGENTS_FETCH_START', \n        attempt: retryCount + 1,\n        maxRetries: maxRetries + 1,\n        context: 'AgentsModule.fetchAgentDataWithRecovery' \n      });\n\n      // Fetch from real agents endpoint with timeout\n      const agentsResponse = await Promise.race([\n        fetch('/v1/agents'),\n        new Promise<never>((_, reject) => \n          setTimeout(() => reject(new Error('Fetch timeout')), 10000)\n        )\n      ]);\n      \n      let agentsData = [];\n      \n      if (agentsResponse.ok) {\n        const rawResponse = await agentsResponse.json();\n        agentsData = validateAndProcessAgentsData(rawResponse);\n      } else {\n        throw new Error(`HTTP ${agentsResponse.status}: ${agentsResponse.statusText}`);\n      }\n\n      // Validate and process the data through business logic layer\n      const processedAgents = processAgentsBusinessLogic(agentsData);\n\n      if (processedAgents.length === 0) {\n        logger.info('No agent records available after processing, skipping auxiliary fetches', {\n          event: 'AGENTS_EMPTY_DATASET',\n          context: 'AgentsModule.fetchAgentDataWithRecovery'\n        });\n\n        setAgents([]);\n        setSessions([]);\n        setError(null);\n        return;\n      }\n\n      // Fetch additional data if primary agents exist\n      const sessionsData = await fetchSessionsData(processedAgents);\n      const metricsData = await fetchMetricsData();\n      \n      // Enhance agents with system metrics\n      const enhancedAgents = enhanceAgentsWithMetrics(processedAgents, metricsData);\n      \n      setAgents(enhancedAgents);\n      setSessions(sessionsData);\n      setError(null);\n      \n      logger.info('Agent data fetch completed successfully', { \n        event: 'AGENTS_FETCH_SUCCESS', \n        agentCount: enhancedAgents.length,\n        sessionCount: sessionsData.length,\n        context: 'AgentsModule.fetchAgentDataWithRecovery' \n      });\n      \n    } catch (err) {\n      logger.error('Agent data fetch failed', { \n        event: 'AGENTS_FETCH_ERROR', \n        attempt: retryCount + 1,\n        maxRetries: maxRetries + 1,\n        error: String(err),\n        context: 'AgentsModule.fetchAgentDataWithRecovery' \n      });\n\n      // Autonomous recovery: retry with exponential backoff\n      if (retryCount < maxRetries) {\n        logger.info('Triggering automatic retry with exponential backoff', { \n          event: 'AGENTS_FETCH_RETRY', \n          retryCount: retryCount + 1,\n          retryDelay,\n          context: 'AgentsModule.fetchAgentDataWithRecovery' \n        });\n        \n        setTimeout(() => {\n          fetchAgentDataWithRecovery(retryCount + 1);\n        }, retryDelay);\n        return;\n      }\n\n      // Final fallback: provide empty state with error\n      logger.error('All retry attempts exhausted, entering error state', { \n        event: 'AGENTS_FETCH_FINAL_FAILURE', \n        totalAttempts: maxRetries + 1,\n        context: 'AgentsModule.fetchAgentDataWithRecovery' \n      });\n      \n      setError(err instanceof Error ? err.message : 'Unknown error');\n      setAgents([]); // Business logic: return empty array, not undefined\n      setSessions([]);\n    }\n  };\n\n  // Business logic layer: process raw agent data into structured format\n  const processAgentsBusinessLogic = (agentsData: any[]): Agent[] => {\n    return agentsData.map((agent: any, index: number) => {\n      // Calculate real performance metrics from agent data\n      const totalExecutions = agent.total_executions || 0;\n      const successfulExecutions = agent.successful_executions || 0;\n      const failedExecutions = agent.failed_executions || 0;\n      const avgExecutionTime = agent.avg_execution_time || 0;\n      \n      // Real success rate calculation\n      const successRate = totalExecutions > 0 ? (successfulExecutions / totalExecutions) * 100 : 0;\n      \n      // Real health calculation based on error rate and performance\n      const errorRate = totalExecutions > 0 ? (failedExecutions / totalExecutions) * 100 : 0;\n      const health = Math.max(0, Math.min(100, 100 - errorRate));\n      \n      return {\n        id: agent.id || `agent_${index}`,\n        name: agent.name || `Agent ${index + 1}`,\n        type: agent.type || agent.agent_type || 'Unknown',\n        status: (agent.status as 'active' | 'idle' | 'error' | 'stopped') || 'idle',\n        health: Math.floor(health),\n        lastActivity: agent.last_execution || agent.updated_at || new Date().toISOString(),\n        totalTasks: totalExecutions,\n        completedTasks: successfulExecutions,\n        errorCount: failedExecutions,\n        performance: {\n          avgResponseTime: Math.floor(avgExecutionTime * 1000), // Convert to ms\n          successRate: Math.floor(successRate * 10) / 10, // Round to 1 decimal\n          throughput: agent.throughput_per_hour || 0\n        },\n        capabilities: agent.capabilities || getAgentCapabilities(agent.type || agent.agent_type || 'unknown')\n      };\n    });\n  };\n\n  // Business logic: fetch sessions data with fallback\n  const fetchSessionsData = async (agents: Agent[]): Promise<AgentSession[]> => {\n    if (agents.length === 0) {\n      return [];\n    }\n\n    try {\n      const agentId = agents[0].id;\n      const sessionsResponse = await fetch(`/v1/agents/${agentId}/logs`);\n      if (sessionsResponse.ok) {\n        const rawSessions = await sessionsResponse.json();\n        return ensureArray(rawSessions);\n      }\n    } catch (err) {\n      logger.warn('Failed to fetch sessions, using empty array fallback', { \n        event: 'SESSIONS_FETCH_ERROR', \n        error: String(err),\n        context: 'AgentsModule.fetchSessionsData' \n      });\n    }\n    \n    return [];\n  };\n\n  // Business logic: fetch metrics data with fallback\n  const fetchMetricsData = async (): Promise<any> => {\n    try {\n      const metricsResponse = await fetch('/v1/metrics');\n      if (metricsResponse.ok) {\n        return await metricsResponse.json();\n      }\n    } catch (err) {\n      logger.warn('Failed to fetch metrics, using null fallback', { \n        event: 'METRICS_FETCH_ERROR', \n        error: String(err),\n        context: 'AgentsModule.fetchMetricsData' \n      });\n    }\n    \n    return null;\n  };\n\n  // Business logic: enhance agents with system metrics\n  const enhanceAgentsWithMetrics = (agents: Agent[], metricsData: any): Agent[] => {\n    const enhancedAgents = [...agents];\n    \n    // Add system-level agents based on metrics\n    if (metricsData?.active_sessions > 0) {\n      enhancedAgents.push({\n        id: 'system_orchestrator',\n        name: 'System Orchestrator',\n        type: 'Core System',\n        status: 'active',\n        health: metricsData.ok ? 95 : 60,\n        lastActivity: new Date().toISOString(),\n        totalTasks: metricsData.total_requests || 0,\n        completedTasks: Math.floor((metricsData.total_requests || 0) * 0.95),\n        errorCount: metricsData.total_errors || 0,\n        performance: {\n          avgResponseTime: 120,\n          successRate: (((metricsData.total_requests || 0) - (metricsData.total_errors || 0)) / Math.max(metricsData.total_requests || 1, 1)) * 100,\n          throughput: metricsData.active_sessions || 0\n        },\n        capabilities: ['Request Orchestration', 'Session Management', 'Error Handling']\n      });\n    }\n    \n    return enhancedAgents;\n  };\n\n  // Fetch real agent data from backend\n  const fetchAgentData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    await fetchAgentDataWithRecovery();\n    \n    setLoading(false);\n  };\n\n  // Agent management actions\n  const createAgentSession = async () => {\n    try {\n      const agentId = selectedAgent || (agents[0]?.id ?? 'quantum-001');\n      const response = await fetch(`/v1/agents/${agentId}/run`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (response.ok) {\n        await response.json();\n        fetchAgentData();\n      }\n    } catch (err) {\n      console.error('Failed to create agent session:', err);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-400';\n      case 'idle': return 'text-yellow-400';\n      case 'error': return 'text-red-400';\n      case 'stopped': return 'text-gray-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active': return Play;\n      case 'idle': return Pause;\n      case 'error': return AlertCircle;\n      case 'stopped': return Square;\n      default: return Clock;\n    }\n  };\n\n  const formatLastActivity = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    \n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    \n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays}d ago`;\n  };\n\n  const getAgentCapabilities = (agentType: string): string[] => {\n    const capabilityMap: Record<string, string[]> = {\n      'product_research': ['Product Discovery', 'Market Analysis', 'Trend Identification', 'Competitor Research'],\n      'inventory_forecasting': ['Demand Prediction', 'Stock Management', 'Prophet Forecasting', 'Shopify Integration'],\n      'marketing_automation': ['Email Campaigns', 'Customer Segmentation', 'A/B Testing', 'Behavioral Triggers'],\n      'order_management': ['Risk Assessment', 'Supplier Routing', 'Tracking Sync', 'Return Processing'],\n      'pricing_optimizer': ['Competitive Analysis', 'Dynamic Pricing', 'Margin Optimization', 'Market Intelligence'],\n      'analytics': ['Revenue Analytics', 'Performance Tracking', 'Business Intelligence', 'Report Generation'],\n      'customer_support': ['AI Chat', 'Ticket Resolution', 'Knowledge Base', 'Escalation Management'],\n      'security': ['Fraud Detection', 'Risk Assessment', 'Compliance Monitoring', 'Threat Analysis']\n    };\n    \n    return capabilityMap[agentType] || ['Task Processing', 'Data Analysis', 'Automation'];\n  };\n\n  useEffect(() => {\n    fetchAgentData();\n    \n    // Set up real-time updates\n    const interval = setInterval(fetchAgentData, 15000); // Refresh every 15 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-black text-white p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 text-cyan-400 animate-spin mx-auto mb-4\" />\n          <p className=\"text-lg text-cyan-400\">Loading Agent Management System...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-black text-white p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-8 h-8 text-red-400 mx-auto mb-4\" />\n          <p className=\"text-lg text-red-400 mb-4\">Failed to load agent data</p>\n          <p className=\"text-gray-400 mb-4\">{error}</p>\n          <button\n            onClick={fetchAgentData}\n            className=\"px-4 py-2 bg-cyan-600/20 border border-cyan-500/30 text-cyan-300 rounded-lg hover:bg-cyan-600/30\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-6\">\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-8\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Agent Management\n            </h1>\n            <p className=\"text-lg text-gray-400\">Deploy, monitor, and optimize AI agents across your empire</p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2 px-4 py-2 bg-gray-900/40 rounded-lg border border-gray-700/30\">\n              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'} animate-pulse`} />\n              <span className=\"text-sm font-mono\">\n                {agents.filter(a => a.status === 'active').length} Active\n              </span>\n            </div>\n            \n            <button\n              onClick={createAgentSession}\n              className=\"px-4 py-2 bg-purple-600/20 border border-purple-500/30 text-purple-300 rounded-lg hover:bg-purple-600/30 flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Session\n            </button>\n            \n            <button\n              onClick={fetchAgentData}\n              disabled={loading}\n              className=\"p-2 text-gray-400 hover:text-cyan-400 rounded-lg hover:bg-gray-800/60 disabled:opacity-50\"\n            >\n              <RefreshCw className={`w-5 h-5 ${loading ? 'animate-spin' : ''}`} />\n            </button>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Agents Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        {agents.map((agent, index) => {\n          const StatusIcon = getStatusIcon(agent.status);\n          \n          return (\n            <motion.div\n              key={agent.id}\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: index * 0.1 }}\n              onClick={() => setSelectedAgent(selectedAgent === agent.id ? null : agent.id)}\n              className=\"bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30 hover:border-purple-400/30 transition-colors cursor-pointer\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"relative p-3 rounded-lg bg-black/40\">\n                    <Users className=\"w-6 h-6 text-purple-400\" />\n                    <StatusIcon className={`w-3 h-3 absolute -top-1 -right-1 ${getStatusColor(agent.status)}`} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-white\">{agent.name}</h3>\n                    <p className=\"text-sm text-gray-400\">{agent.type}</p>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <div className={`text-sm font-mono ${getStatusColor(agent.status)} uppercase`}>\n                    {agent.status}\n                  </div>\n                  <div className=\"text-xs text-gray-400\">\n                    Health: {agent.health}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Tasks Completed:</span>\n                  <span className=\"text-green-400 font-mono\">{agent.completedTasks}/{agent.totalTasks}</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Success Rate:</span>\n                  <span className=\"text-cyan-400 font-mono\">{agent.performance.successRate.toFixed(1)}%</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Last Activity:</span>\n                  <span className=\"text-white font-mono\">{formatLastActivity(agent.lastActivity)}</span>\n                </div>\n              </div>\n\n              {/* Expanded Details */}\n              {selectedAgent === agent.id && (\n                <motion.div\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                  exit={{ opacity: 0, height: 0 }}\n                  className=\"mt-4 pt-4 border-t border-gray-700/50\"\n                >\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-semibold text-white mb-2\">Performance Metrics</h4>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div className=\"bg-black/40 p-2 rounded\">\n                          <div className=\"text-gray-400\">Avg Response</div>\n                          <div className=\"text-white font-mono\">{agent.performance.avgResponseTime}ms</div>\n                        </div>\n                        <div className=\"bg-black/40 p-2 rounded\">\n                          <div className=\"text-gray-400\">Throughput</div>\n                          <div className=\"text-white font-mono\">{agent.performance.throughput}/min</div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"text-sm font-semibold text-white mb-2\">Capabilities</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {agent.capabilities.map((capability, idx) => (\n                          <span\n                            key={idx}\n                            className=\"px-2 py-1 text-xs bg-purple-500/20 text-purple-300 rounded-full\"\n                          >\n                            {capability}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Active Sessions */}\n      {sessions.length > 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30\"\n        >\n          <h2 className=\"text-xl font-bold text-purple-400 mb-6 flex items-center\">\n            <MessageSquare className=\"w-5 h-5 mr-2\" />\n            Active Agent Sessions\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {sessions.map((session, index) => (\n              <div\n                key={session.id}\n                className=\"p-4 bg-black/40 rounded-lg border border-gray-700/50\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-mono text-sm text-white\">Session {session.id.slice(-8)}</span>\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                </div>\n                <div className=\"text-xs text-gray-400\">\n                  Status: <span className=\"text-green-400\">{session.status}</span>\n                </div>\n                <div className=\"text-xs text-gray-400\">\n                  Created: {new Date(session.created_at).toLocaleString()}\n                </div>\n              </div>\n            ))}\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n}"],"names":["Pause","createLucideIcon","Plus","Square","AgentsModule","agents","setAgents","useState","sessions","setSessions","loading","setLoading","error","setError","selectedAgent","setSelectedAgent","isConnected","useEmpireStore","normalizeAgentPayload","rawData","collections","agentLike","candidate","record","identifier","status","agentType","payload","nested","validateAndProcessAgentsData","logger","agentsArray","fetchAgentDataWithRecovery","retryCount","retryDelay","agentsResponse","_","reject","agentsData","rawResponse","processedAgents","processAgentsBusinessLogic","sessionsData","fetchSessionsData","metricsData","fetchMetricsData","enhancedAgents","enhanceAgentsWithMetrics","err","agent","index","totalExecutions","successfulExecutions","failedExecutions","avgExecutionTime","successRate","errorRate","health","getAgentCapabilities","agentId","sessionsResponse","rawSessions","ensureArray","metricsResponse","fetchAgentData","createAgentSession","_a","response","getStatusColor","getStatusIcon","Play","AlertCircle","Clock","formatLastActivity","timestamp","date","diffMs","diffMins","diffHours","useEffect","interval","jsxs","jsx","RefreshCw","motion","a","StatusIcon","Users","capability","idx","MessageSquare","session","CheckCircle"],"mappings":"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","x_google_ignoreList":[0,1,2]}