{"version":3,"file":"MarketingModule-DbHiIoon.js","sources":["../../apps/command-center-ui/node_modules/lucide-react/dist/esm/icons/mouse-pointer.js","../../apps/command-center-ui/node_modules/lucide-react/dist/esm/icons/send.js","../../apps/command-center-ui/src/hooks/useApiService.ts","../../apps/command-center-ui/src/hooks/useRealTimeData.ts","../../apps/command-center-ui/src/hooks/useNotifications.ts","../../apps/command-center-ui/src/modules/marketing/MarketingModule.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst MousePointer = createLucideIcon(\"MousePointer\", [\n  [\"path\", { d: \"M12.586 12.586 19 19\", key: \"ea5xo7\" }],\n  [\n    \"path\",\n    {\n      d: \"M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z\",\n      key: \"277e5u\"\n    }\n  ]\n]);\n\nexport { MousePointer as default };\n//# sourceMappingURL=mouse-pointer.js.map\n","/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Send = createLucideIcon(\"Send\", [\n  [\n    \"path\",\n    {\n      d: \"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z\",\n      key: \"1ffxy3\"\n    }\n  ],\n  [\"path\", { d: \"m21.854 2.147-10.94 10.939\", key: \"12cjpa\" }]\n]);\n\nexport { Send as default };\n//# sourceMappingURL=send.js.map\n","import { useState, useCallback } from 'react';\n\ninterface ApiResponse<T> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n}\n\ninterface RequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: any;\n}\n\nexport function useApiService() {\n  const [globalLoading, setGlobalLoading] = useState(false);\n  const [globalError, setGlobalError] = useState<string | null>(null);\n\n  const makeRequest = useCallback(async <T = any>(\n    endpoint: string,\n    options: RequestOptions = {}\n  ): Promise<ApiResponse<T>> => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [data, setData] = useState<T | null>(null);\n\n    try {\n      setGlobalLoading(true);\n      setGlobalError(null);\n      setLoading(true);\n      setError(null);\n\n      const { method = 'GET', headers = {}, body } = options;\n      \n      // Set default headers\n      const defaultHeaders = {\n        'Content-Type': 'application/json',\n        ...headers\n      };\n\n      // Prepare request configuration\n      const config: RequestInit = {\n        method,\n        headers: defaultHeaders,\n      };\n\n      if (body && method !== 'GET') {\n        config.body = typeof body === 'string' ? body : JSON.stringify(body);\n      }\n\n      // Make the API call\n      const response = await fetch(endpoint, config);\n\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} ${response.statusText}`);\n      }\n\n      const responseData = await response.json();\n      setData(responseData);\n\n      return {\n        data: responseData,\n        loading: false,\n        error: null\n      };\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown API error';\n      setError(errorMessage);\n      setGlobalError(errorMessage);\n      \n      return {\n        data: null,\n        loading: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n      setGlobalLoading(false);\n    }\n  }, []);\n\n  // Convenience methods for common HTTP operations\n  const get = useCallback(<T = any>(endpoint: string, headers?: Record<string, string>) => {\n    return makeRequest<T>(endpoint, { method: 'GET', headers });\n  }, [makeRequest]);\n\n  const post = useCallback(<T = any>(endpoint: string, body?: any, headers?: Record<string, string>) => {\n    return makeRequest<T>(endpoint, { method: 'POST', body, headers });\n  }, [makeRequest]);\n\n  const put = useCallback(<T = any>(endpoint: string, body?: any, headers?: Record<string, string>) => {\n    return makeRequest<T>(endpoint, { method: 'PUT', body, headers });\n  }, [makeRequest]);\n\n  const patch = useCallback(<T = any>(endpoint: string, body?: any, headers?: Record<string, string>) => {\n    return makeRequest<T>(endpoint, { method: 'PATCH', body, headers });\n  }, [makeRequest]);\n\n  const del = useCallback(<T = any>(endpoint: string, headers?: Record<string, string>) => {\n    return makeRequest<T>(endpoint, { method: 'DELETE', headers });\n  }, [makeRequest]);\n\n  return {\n    // Core request method\n    request: makeRequest,\n    \n    // Convenience methods\n    get,\n    post,\n    put,\n    patch,\n    delete: del,\n    \n    // Global state\n    loading: globalLoading,\n    error: globalError,\n    clearError: () => setGlobalError(null)\n  };\n}","import { useState, useEffect, useCallback, useRef } from 'react';\n\ninterface RealTimeDataOptions {\n  endpoint: string;\n  pollInterval?: number; // in milliseconds\n  enabled?: boolean;\n  onData?: (data: any) => void;\n  onError?: (error: string) => void;\n}\n\ninterface RealTimeDataReturn<T> {\n  data: T | null;\n  loading: boolean;\n  error: string | null;\n  connected: boolean;\n  lastUpdate: Date | null;\n  refresh: () => Promise<void>;\n  reconnect: () => void;\n}\n\nexport function useRealTimeData<T = any>(\n  options: RealTimeDataOptions\n): RealTimeDataReturn<T> {\n  const {\n    endpoint,\n    pollInterval = 5000, // Default to 5 seconds\n    enabled = true,\n    onData,\n    onError\n  } = options;\n\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const isComponentMounted = useRef(true);\n\n  const fetchData = useCallback(async () => {\n    if (!enabled || !isComponentMounted.current) return;\n\n    try {\n      setError(null);\n      \n      const response = await fetch(endpoint);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const responseData = await response.json();\n      \n      if (isComponentMounted.current) {\n        setData(responseData);\n        setConnected(true);\n        setLastUpdate(new Date());\n        setLoading(false);\n        \n        // Call optional data callback\n        onData?.(responseData);\n      }\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch real-time data';\n      \n      if (isComponentMounted.current) {\n        setError(errorMessage);\n        setConnected(false);\n        setLoading(false);\n        \n        // Call optional error callback\n        onError?.(errorMessage);\n      }\n      \n      console.error('Real-time data fetch error:', err);\n    }\n  }, [endpoint, enabled, onData, onError]);\n\n  const startPolling = useCallback(() => {\n    if (!enabled) return;\n    \n    // Clear any existing interval\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    \n    // Initial fetch\n    fetchData();\n    \n    // Set up polling interval\n    intervalRef.current = setInterval(fetchData, pollInterval);\n  }, [fetchData, pollInterval, enabled]);\n\n  const stopPolling = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    setConnected(false);\n  }, []);\n\n  const reconnect = useCallback(() => {\n    stopPolling();\n    setError(null);\n    setLoading(true);\n    startPolling();\n  }, [startPolling, stopPolling]);\n\n  const refresh = useCallback(async () => {\n    setLoading(true);\n    await fetchData();\n  }, [fetchData]);\n\n  // Set up polling on mount and when options change\n  useEffect(() => {\n    if (enabled) {\n      startPolling();\n    } else {\n      stopPolling();\n    }\n\n    return () => {\n      stopPolling();\n    };\n  }, [enabled, startPolling, stopPolling]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      isComponentMounted.current = false;\n      stopPolling();\n    };\n  }, [stopPolling]);\n\n  return {\n    data,\n    loading,\n    error,\n    connected,\n    lastUpdate,\n    refresh,\n    reconnect\n  };\n}","import { useState, useCallback, useEffect } from 'react';\nimport toast from 'react-hot-toast';\n\nexport type NotificationType = 'success' | 'error' | 'warning' | 'info';\n\nexport interface Notification {\n  id: string;\n  type: NotificationType;\n  title: string;\n  message?: string;\n  timestamp: Date;\n  read: boolean;\n  persistent?: boolean;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\ninterface NotificationOptions {\n  type?: NotificationType;\n  persistent?: boolean;\n  duration?: number;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nexport function useNotifications() {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Add a new notification\n  const addNotification = useCallback((\n    title: string,\n    message?: string,\n    options: NotificationOptions = {}\n  ) => {\n    const {\n      type = 'info',\n      persistent = false,\n      duration = 4000,\n      action\n    } = options;\n\n    const notification: Notification = {\n      id: `${Date.now()}-${Math.random()}`,\n      type,\n      title,\n      message,\n      timestamp: new Date(),\n      read: false,\n      persistent,\n      action\n    };\n\n    // Add to notifications list\n    setNotifications(prev => [notification, ...prev]);\n    setUnreadCount(prev => prev + 1);\n\n    // Show toast notification\n    const toastOptions = {\n      duration: persistent ? Infinity : duration,\n      position: 'top-right' as const,\n    };\n\n    switch (type) {\n      case 'success':\n        toast.success(`${title}${message ? `: ${message}` : ''}`, toastOptions);\n        break;\n      case 'error':\n        toast.error(`${title}${message ? `: ${message}` : ''}`, toastOptions);\n        break;\n      case 'warning':\n        toast(`⚠️ ${title}${message ? `: ${message}` : ''}`, toastOptions);\n        break;\n      default:\n        toast(`ℹ️ ${title}${message ? `: ${message}` : ''}`, toastOptions);\n    }\n\n    return notification.id;\n  }, []);\n\n  // Convenience methods for different notification types\n  const success = useCallback((title: string, message?: string, options?: Omit<NotificationOptions, 'type'>) => {\n    return addNotification(title, message, { ...options, type: 'success' });\n  }, [addNotification]);\n\n  const error = useCallback((title: string, message?: string, options?: Omit<NotificationOptions, 'type'>) => {\n    return addNotification(title, message, { ...options, type: 'error' });\n  }, [addNotification]);\n\n  const warning = useCallback((title: string, message?: string, options?: Omit<NotificationOptions, 'type'>) => {\n    return addNotification(title, message, { ...options, type: 'warning' });\n  }, [addNotification]);\n\n  const info = useCallback((title: string, message?: string, options?: Omit<NotificationOptions, 'type'>) => {\n    return addNotification(title, message, { ...options, type: 'info' });\n  }, [addNotification]);\n\n  // Mark notification as read\n  const markAsRead = useCallback((id: string) => {\n    setNotifications(prev => prev.map(notif => \n      notif.id === id ? { ...notif, read: true } : notif\n    ));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  }, []);\n\n  // Mark all notifications as read\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(notif => ({ ...notif, read: true })));\n    setUnreadCount(0);\n  }, []);\n\n  // Remove notification\n  const removeNotification = useCallback((id: string) => {\n    setNotifications(prev => {\n      const notification = prev.find(notif => notif.id === id);\n      if (notification && !notification.read) {\n        setUnreadCount(count => Math.max(0, count - 1));\n      }\n      return prev.filter(notif => notif.id !== id);\n    });\n    \n    // Dismiss toast if it exists\n    toast.dismiss(id);\n  }, []);\n\n  // Clear all notifications\n  const clearAll = useCallback(() => {\n    setNotifications([]);\n    setUnreadCount(0);\n    toast.dismiss();\n  }, []);\n\n  // Get notifications by type\n  const getByType = useCallback((type: NotificationType) => {\n    return notifications.filter(notif => notif.type === type);\n  }, [notifications]);\n\n  // Get unread notifications\n  const getUnread = useCallback(() => {\n    return notifications.filter(notif => !notif.read);\n  }, [notifications]);\n\n  // Auto-cleanup old notifications\n  useEffect(() => {\n    const cleanup = setInterval(() => {\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      \n      setNotifications(prev => {\n        const filtered = prev.filter(notif => \n          notif.persistent || notif.timestamp > oneDayAgo\n        );\n        \n        // Update unread count if any notifications were removed\n        const removedUnread = prev.filter(notif => \n          !notif.read && (!notif.persistent && notif.timestamp <= oneDayAgo)\n        ).length;\n        \n        if (removedUnread > 0) {\n          setUnreadCount(count => Math.max(0, count - removedUnread));\n        }\n        \n        return filtered;\n      });\n    }, 60000); // Check every minute\n\n    return () => clearInterval(cleanup);\n  }, []);\n\n  return {\n    notifications,\n    unreadCount,\n    \n    // Core methods\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll,\n    \n    // Convenience methods\n    success,\n    error,\n    warning,\n    info,\n    \n    // Query methods\n    getByType,\n    getUnread\n  };\n}","/*\r\nMarketing Automation Module - Elite Command Center UI\r\nReal-time marketing performance monitoring and campaign management\r\n*/\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/ui/Card';\r\nimport { Button } from '../../components/ui/Button';\r\nimport { Badge } from '../../components/ui/Badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/Tabs';\r\nimport { \r\n  TrendingUp, \r\n  Mail, \r\n  Users, \r\n  DollarSign, \r\n  Target, \r\n  BarChart3,\r\n  Zap,\r\n  RefreshCw,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Clock,\r\n  Send,\r\n  Eye,\r\n  MousePointer,\r\n  Heart\r\n} from 'lucide-react';\r\n\r\nimport { useApiService } from '../../hooks/useApiService';\r\nimport { useRealTimeData } from '../../hooks/useRealTimeData';\r\nimport { ensureArray } from '../../utils/array-utils';\r\nimport { useNotifications } from '../../hooks/useNotifications';\r\n\r\n\r\ninterface MarketingMetrics {\r\n  revenue: {\r\n    email_attributed: number;\r\n    social_attributed: number;\r\n    total_attributed: number;\r\n  };\r\n  engagement: {\r\n    email_open_rate: number;\r\n    email_click_rate: number;\r\n    social_engagement_rate: number;\r\n  };\r\n  campaigns: {\r\n    active_email: number;\r\n    total_sent: number;\r\n    social_impressions: number;\r\n  };\r\n  performance: {\r\n    roas: number;\r\n    conversion_rate: number;\r\n  };\r\n}\r\n\r\ninterface CampaignRecommendation {\r\n  type: string;\r\n  name: string;\r\n  target_audience: string;\r\n  budget: number;\r\n  timeline: string;\r\n  expected_roi?: number;\r\n}\r\n\r\ninterface IntegrationStatus {\r\n  openai: boolean;\r\n  klaviyo: boolean;\r\n  sendgrid: boolean;\r\n  facebook: boolean;\r\n}\r\n\r\ninterface PerformanceAnalysis {\r\n  revenue_attribution: Record<string, number>;\r\n  engagement_metrics: Record<string, number>;\r\n  campaign_performance: Record<string, number>;\r\n  ai_insights?: any;\r\n  recommendations?: string[];\r\n}\r\n\r\nexport const MarketingAutomationModule: React.FC = () => {\r\n  const [metrics, setMetrics] = useState<MarketingMetrics | null>(null);\r\n  const [recommendations, setRecommendations] = useState<CampaignRecommendation[]>([]);\r\n  const [integrationStatus, setIntegrationStatus] = useState<IntegrationStatus | null>(null);\r\n  const [performanceAnalysis, setPerformanceAnalysis] = useState<PerformanceAnalysis | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [contentGeneration, setContentGeneration] = useState<any>(null);\r\n  const [activeCampaigns, setActiveCampaigns] = useState<any[]>([]);\r\n  \r\n  const { get: apiCall } = useApiService();\r\n  const { addNotification } = useNotifications();\r\n  \r\n  // Real-time data subscription\r\n  const realTimeMetrics = useRealTimeData({ endpoint: '/api/marketing/metrics' });\r\n  const campaignUpdates = useRealTimeData({ endpoint: '/api/marketing/campaigns' });\r\n\r\n  // Update metrics from real-time data\r\n  useEffect(() => {\r\n    if (realTimeMetrics.data) {\r\n      setMetrics(realTimeMetrics.data);\r\n    }\r\n  }, [realTimeMetrics]);\r\n\r\n  useEffect(() => {\r\n    if (campaignUpdates.data) {\r\n      setActiveCampaigns(prev => [...prev, campaignUpdates.data]);\r\n    }\r\n  }, [campaignUpdates]);\r\n\r\n  // Initial data loading\r\n  const loadMarketingData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Load all marketing data in parallel\r\n      const [\r\n        metricsResponse,\r\n        recommendationsResponse,\r\n        integrationsResponse,\r\n        performanceResponse,\r\n        campaignsResponse\r\n      ] = await Promise.all([\r\n        apiCall('/api/marketing/metrics/real-time'),\r\n        apiCall('/api/marketing/campaigns/recommendations'),\r\n        apiCall('/api/marketing/integrations/test'),\r\n        apiCall('/api/marketing/performance/analysis'),\r\n        apiCall('/api/marketing/campaigns/active')\r\n      ]);\r\n\r\n      if (metricsResponse.data && !metricsResponse.error) {\r\n        setMetrics(metricsResponse.data.metrics);\r\n      }\r\n\r\n      if (recommendationsResponse.data && !recommendationsResponse.error) {\r\n        setRecommendations(ensureArray(recommendationsResponse.data.recommendations));\r\n      }\r\n\r\n      if (integrationsResponse.data && !integrationsResponse.error) {\r\n        setIntegrationStatus(integrationsResponse.data.integrations);\r\n      }\r\n\r\n      if (performanceResponse.data && !performanceResponse.error) {\r\n        setPerformanceAnalysis(performanceResponse.data.performance_analysis);\r\n      }\r\n\r\n      if (campaignsResponse.data && !campaignsResponse.error) {\r\n        setActiveCampaigns(ensureArray(campaignsResponse.data.active_campaigns?.email));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to load marketing data:', error);\r\n      addNotification(\r\n        'Marketing Data Error',\r\n        'Failed to load marketing data',\r\n        { type: 'error', duration: 5000 }\r\n      );\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [apiCall, addNotification]);\r\n\r\n  useEffect(() => {\r\n    loadMarketingData();\r\n  }, [loadMarketingData]);\r\n\r\n  const executeMarketingAutomation = async () => {\r\n    try {\r\n      const response = await apiCall('/api/marketing/execute', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ trigger: 'manual', context: 'command_center' })\r\n      });\r\n\r\n      if (response.data && !response.error) {\r\n        addNotification(\r\n          'Automation Success',\r\n          'Marketing automation executed successfully',\r\n          { type: 'success', duration: 3000 }\r\n        );\r\n        await loadMarketingData(); // Reload data\r\n      }\r\n    } catch (error) {\r\n      addNotification(\r\n        'Automation Error',\r\n        'Failed to execute marketing automation',\r\n        { type: 'error', duration: 5000 }\r\n      );\r\n    }\r\n  };\r\n\r\n  const generateContent = async (contentType: string, prompt: string) => {\r\n    try {\r\n      const response = await apiCall('/api/marketing/content/generate', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          content_type: contentType,\r\n          prompt: prompt,\r\n          tone: 'luxury',\r\n          max_length: 500\r\n        })\r\n      });\r\n\r\n      if (response.data && !response.error) {\r\n        setContentGeneration(response.data.content);\r\n        addNotification(\r\n          'Content Generated',\r\n          'Content generated successfully',\r\n          { type: 'success', duration: 3000 }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      addNotification(\r\n        'Content Generation Error',\r\n        'Content generation failed',\r\n        { type: 'error', duration: 5000 }\r\n      );\r\n    }\r\n  };\r\n\r\n  const createCampaign = async (campaignData: any) => {\r\n    try {\r\n      const response = await apiCall('/api/marketing/campaigns/create', {\r\n        method: 'POST',\r\n        body: JSON.stringify(campaignData)\r\n      });\r\n\r\n      if (response.data && !response.error) {\r\n        addNotification(\r\n          'Campaign Created',\r\n          'Campaign created successfully',\r\n          { type: 'success', duration: 3000 }\r\n        );\r\n        await loadMarketingData(); // Reload data\r\n      }\r\n    } catch (error) {\r\n      addNotification(\r\n        'Campaign Creation Error',\r\n        'Campaign creation failed',\r\n        { type: 'error', duration: 5000 }\r\n      );\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (value: number) => {\r\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\r\n    if (value >= 1000) return `$${(value / 1000).toFixed(1)}K`;\r\n    return `$${value.toFixed(0)}`;\r\n  };\r\n\r\n  const formatPercentage = (value: number) => `${value.toFixed(1)}%`;\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-96\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <RefreshCw className=\"h-5 w-5 animate-spin text-accent-cyan\" />\r\n          <span className=\"text-text-dim\">Loading marketing intelligence...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold text-text-primary mb-2\">\r\n            Marketing Automation Command Center\r\n          </h1>\r\n          <p className=\"text-text-dim\">\r\n            AI-powered marketing automation with real-time performance tracking\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex space-x-3\">\r\n          <Button\r\n            onClick={executeMarketingAutomation}\r\n            className=\"bg-gradient-to-r from-accent-magenta to-accent-cyan\"\r\n          >\r\n            <Zap className=\"h-4 w-4 mr-2\" />\r\n            Execute Automation\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={loadMarketingData}\r\n            className=\"border-accent-cyan text-accent-cyan hover:bg-accent-cyan hover:text-bg\"\r\n          >\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Refresh\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Integration Status */}\r\n      <Card className=\"bg-surface border-accent-cyan/20\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center text-text-primary\">\r\n            <Target className=\"h-5 w-5 mr-2 text-accent-cyan\" />\r\n            Integration Status\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            {Object.entries(integrationStatus || {}).map(([service, connected]) => (\r\n              <div key={service} className=\"flex items-center space-x-2\">\r\n                {connected ? (\r\n                  <CheckCircle className=\"h-4 w-4 text-accent-green\" />\r\n                ) : (\r\n                  <AlertCircle className=\"h-4 w-4 text-accent-magenta\" />\r\n                )}\r\n                <span className={`text-sm ${connected ? 'text-accent-green' : 'text-accent-magenta'}`}>\r\n                  {service.charAt(0).toUpperCase() + service.slice(1)}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Metrics Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card className=\"bg-surface border-accent-green/20\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-text-dim\">Total Revenue</p>\r\n                <p className=\"text-2xl font-bold text-accent-green\">\r\n                  {formatCurrency(metrics?.revenue?.total_attributed || 0)}\r\n                </p>\r\n              </div>\r\n              <DollarSign className=\"h-8 w-8 text-accent-green\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"bg-surface border-accent-cyan/20\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-text-dim\">Email Open Rate</p>\r\n                <p className=\"text-2xl font-bold text-accent-cyan\">\r\n                  {formatPercentage(metrics?.engagement?.email_open_rate || 0)}\r\n                </p>\r\n              </div>\r\n              <Eye className=\"h-8 w-8 text-accent-cyan\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"bg-surface border-accent-magenta/20\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-text-dim\">Click Rate</p>\r\n                <p className=\"text-2xl font-bold text-accent-magenta\">\r\n                  {formatPercentage(metrics?.engagement?.email_click_rate || 0)}\r\n                </p>\r\n              </div>\r\n              <MousePointer className=\"h-8 w-8 text-accent-magenta\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"bg-surface border-accent-green/20\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-text-dim\">ROAS</p>\r\n                <p className=\"text-2xl font-bold text-accent-green\">\r\n                  {(metrics?.performance?.roas || 0).toFixed(1)}x\r\n                </p>\r\n              </div>\r\n              <TrendingUp className=\"h-8 w-8 text-accent-green\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Main Content Tabs */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-4 bg-surface\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"campaigns\">Campaigns</TabsTrigger>\r\n          <TabsTrigger value=\"content\">Content AI</TabsTrigger>\r\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          {/* Revenue Attribution */}\r\n          <Card className=\"bg-surface border-accent-cyan/20\">\r\n            <CardHeader>\r\n              <CardTitle className=\"text-text-primary\">Revenue Attribution</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-3 gap-6\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-accent-cyan\">\r\n                    {formatCurrency(metrics?.revenue?.email_attributed || 0)}\r\n                  </div>\r\n                  <div className=\"text-sm text-text-dim\">Email Marketing</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-accent-magenta\">\r\n                    {formatCurrency(metrics?.revenue?.social_attributed || 0)}\r\n                  </div>\r\n                  <div className=\"text-sm text-text-dim\">Social Media</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-accent-green\">\r\n                    {formatCurrency(metrics?.revenue?.total_attributed || 0)}\r\n                  </div>\r\n                  <div className=\"text-sm text-text-dim\">Total Attributed</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* AI Recommendations */}\r\n          <Card className=\"bg-surface border-accent-magenta/20\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center text-text-primary\">\r\n                <Zap className=\"h-5 w-5 mr-2 text-accent-magenta\" />\r\n                AI Campaign Recommendations\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {recommendations.map((rec, index) => (\r\n                  <div key={index} className=\"p-4 border border-accent-cyan/20 rounded-lg\">\r\n                    <div className=\"flex items-center justify-between mb-2\">\r\n                      <h4 className=\"font-semibold text-text-primary\">{rec.name}</h4>\r\n                      <Badge variant=\"outline\" className=\"border-accent-cyan text-accent-cyan\">\r\n                        {rec.type}\r\n                      </Badge>\r\n                    </div>\r\n                    <p className=\"text-sm text-text-dim mb-2\">\r\n                      Target: {rec.target_audience} | Budget: {formatCurrency(rec.budget)}\r\n                    </p>\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm text-text-dim\">{rec.timeline}</span>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        onClick={() => createCampaign(rec)}\r\n                        className=\"bg-accent-magenta hover:bg-accent-magenta/80\"\r\n                      >\r\n                        Create Campaign\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"campaigns\" className=\"space-y-6\">\r\n          {/* Active Campaigns */}\r\n          <Card className=\"bg-surface border-accent-cyan/20\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center text-text-primary\">\r\n                <Mail className=\"h-5 w-5 mr-2 text-accent-cyan\" />\r\n                Active Campaigns ({activeCampaigns.length})\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {activeCampaigns.length > 0 ? (\r\n                  activeCampaigns.map((campaign, index) => (\r\n                    <div key={index} className=\"p-4 border border-accent-green/20 rounded-lg\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <h4 className=\"font-semibold text-text-primary\">{campaign.name || `Campaign ${index + 1}`}</h4>\r\n                          <p className=\"text-sm text-text-dim\">Status: {campaign.status || 'Active'}</p>\r\n                        </div>\r\n                        <Badge variant=\"outline\" className=\"border-accent-green text-accent-green\">\r\n                          Running\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"text-center py-8 text-text-dim\">\r\n                    No active campaigns found\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Campaign Statistics */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n            <Card className=\"bg-surface border-accent-cyan/20\">\r\n              <CardContent className=\"p-6 text-center\">\r\n                <Send className=\"h-8 w-8 text-accent-cyan mx-auto mb-2\" />\r\n                <div className=\"text-2xl font-bold text-text-primary\">\r\n                  {metrics?.campaigns?.total_sent?.toLocaleString() || 0}\r\n                </div>\r\n                <div className=\"text-sm text-text-dim\">Emails Sent</div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"bg-surface border-accent-magenta/20\">\r\n              <CardContent className=\"p-6 text-center\">\r\n                <Users className=\"h-8 w-8 text-accent-magenta mx-auto mb-2\" />\r\n                <div className=\"text-2xl font-bold text-text-primary\">\r\n                  {metrics?.campaigns?.social_impressions?.toLocaleString() || 0}\r\n                </div>\r\n                <div className=\"text-sm text-text-dim\">Social Impressions</div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"bg-surface border-accent-green/20\">\r\n              <CardContent className=\"p-6 text-center\">\r\n                <Heart className=\"h-8 w-8 text-accent-green mx-auto mb-2\" />\r\n                <div className=\"text-2xl font-bold text-text-primary\">\r\n                  {formatPercentage(metrics?.engagement?.social_engagement_rate || 0)}\r\n                </div>\r\n                <div className=\"text-sm text-text-dim\">Social Engagement</div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"content\" className=\"space-y-6\">\r\n          {/* Content Generation */}\r\n          <Card className=\"bg-surface border-accent-magenta/20\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center text-text-primary\">\r\n                <Zap className=\"h-5 w-5 mr-2 text-accent-magenta\" />\r\n                AI Content Generation\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <Button\r\n                  onClick={() => generateContent('email_subject', 'Create compelling email subject lines for luxury products')}\r\n                  className=\"bg-accent-cyan hover:bg-accent-cyan/80 p-6 h-auto flex-col\"\r\n                >\r\n                  <Mail className=\"h-6 w-6 mb-2\" />\r\n                  Generate Email Subjects\r\n                </Button>\r\n                \r\n                <Button\r\n                  onClick={() => generateContent('social_post', 'Create engaging social media posts for product launch')}\r\n                  className=\"bg-accent-magenta hover:bg-accent-magenta/80 p-6 h-auto flex-col\"\r\n                >\r\n                  <Users className=\"h-6 w-6 mb-2\" />\r\n                  Generate Social Posts\r\n                </Button>\r\n              </div>\r\n\r\n              {contentGeneration && (\r\n                <div className=\"mt-6 p-4 border border-accent-cyan/20 rounded-lg\">\r\n                  <h4 className=\"font-semibold text-text-primary mb-2\">Generated Content:</h4>\r\n                  <div className=\"text-sm text-text-dim whitespace-pre-wrap\">\r\n                    {contentGeneration.content}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\r\n          {/* Performance Analysis */}\r\n          <Card className=\"bg-surface border-accent-cyan/20\">\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center text-text-primary\">\r\n                <BarChart3 className=\"h-5 w-5 mr-2 text-accent-cyan\" />\r\n                Performance Analytics\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {performanceAnalysis ? (\r\n                <div className=\"space-y-6\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                    <div>\r\n                      <h4 className=\"font-semibold text-text-primary mb-3\">Revenue Attribution</h4>\r\n                      <div className=\"space-y-2\">\r\n                        {Object.entries(performanceAnalysis.revenue_attribution || {}).map(([channel, value]) => (\r\n                          <div key={channel} className=\"flex justify-between\">\r\n                            <span className=\"text-text-dim capitalize\">{channel.replace('_', ' ')}</span>\r\n                            <span className=\"text-text-primary font-semibold\">{formatCurrency(value)}</span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <h4 className=\"font-semibold text-text-primary mb-3\">Engagement Metrics</h4>\r\n                      <div className=\"space-y-2\">\r\n                        {Object.entries(performanceAnalysis.engagement_metrics || {}).map(([metric, value]) => (\r\n                          <div key={metric} className=\"flex justify-between\">\r\n                            <span className=\"text-text-dim capitalize\">{metric.replace('_', ' ')}</span>\r\n                            <span className=\"text-text-primary font-semibold\">{formatPercentage(value)}</span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {performanceAnalysis.recommendations && (\r\n                    <div>\r\n                      <h4 className=\"font-semibold text-text-primary mb-3\">AI Recommendations</h4>\r\n                      <div className=\"space-y-2\">\r\n                        {performanceAnalysis.recommendations.map((rec, index) => (\r\n                          <div key={index} className=\"flex items-start space-x-2\">\r\n                            <Zap className=\"h-4 w-4 text-accent-magenta mt-0.5\" />\r\n                            <span className=\"text-text-dim text-sm\">{rec}</span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-text-dim\">\r\n                  Loading performance analytics...\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarketingAutomationModule;"],"names":["MousePointer","createLucideIcon","Send","useApiService","globalLoading","setGlobalLoading","useState","globalError","setGlobalError","makeRequest","useCallback","endpoint","options","loading","setLoading","error","setError","data","setData","method","headers","body","defaultHeaders","config","response","responseData","err","errorMessage","get","post","put","patch","del","useRealTimeData","pollInterval","enabled","onData","onError","connected","setConnected","lastUpdate","setLastUpdate","intervalRef","useRef","isComponentMounted","fetchData","startPolling","stopPolling","reconnect","refresh","useEffect","useNotifications","notifications","setNotifications","unreadCount","setUnreadCount","addNotification","title","message","type","persistent","duration","action","notification","prev","toastOptions","toast","success","warning","info","markAsRead","id","notif","markAllAsRead","removeNotification","count","clearAll","getByType","getUnread","cleanup","oneDayAgo","filtered","removedUnread","MarketingAutomationModule","metrics","setMetrics","recommendations","setRecommendations","integrationStatus","setIntegrationStatus","performanceAnalysis","setPerformanceAnalysis","isLoading","setIsLoading","contentGeneration","setContentGeneration","activeCampaigns","setActiveCampaigns","apiCall","realTimeMetrics","campaignUpdates","loadMarketingData","metricsResponse","recommendationsResponse","integrationsResponse","performanceResponse","campaignsResponse","ensureArray","_a","executeMarketingAutomation","generateContent","contentType","prompt","createCampaign","campaignData","formatCurrency","value","formatPercentage","jsxs","jsx","RefreshCw","Button","Zap","Card","CardHeader","CardTitle","Target","CardContent","service","CheckCircle","AlertCircle","DollarSign","_b","Eye","_c","_d","TrendingUp","Tabs","TabsList","TabsTrigger","TabsContent","_e","_f","_g","rec","index","Badge","Mail","campaign","Users","Heart","_l","BarChart3","channel","metric"],"mappings":"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","x_google_ignoreList":[0,1]}