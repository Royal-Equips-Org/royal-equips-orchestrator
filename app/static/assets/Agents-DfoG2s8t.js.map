{"version":3,"file":"Agents-DfoG2s8t.js","sources":["../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../../src/pages/Agents.tsx"],"sourcesContent":["\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useCallback, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const memoizedOnExitComplete = useCallback((childId) => {\n        presenceChildren.set(childId, true);\n        for (const isComplete of presenceChildren.values()) {\n            if (!isComplete)\n                return; // can stop searching when any is incomplete\n        }\n        onExitComplete && onExitComplete();\n    }, [presenceChildren, onExitComplete]);\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: memoizedOnExitComplete,\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout\n        ? [Math.random(), memoizedOnExitComplete]\n        : [isPresent, memoizedOnExitComplete]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = jsx(PopChild, { isPresent: isPresent, children: children });\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && (safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove());\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Card } from '../components/Card';\nimport { useAgentStatus } from '../hooks/useWebSocket';\nimport { ParticleBackground } from '../components/ParticleBackground';\nimport { apiClient } from '../utils/api';\nimport './Agents.css';\n\ninterface Agent {\n  id: string;\n  name: string;\n  status: 'running' | 'idle' | 'error';\n  lastRun: Date;\n  performance: {\n    speed: number;\n    successRate: number;\n    errors: number;\n  };\n  currentTask?: string;\n  resources?: {\n    cpu: number;\n    memory: number;\n  };\n}\n\nexport const Agents: React.FC = () => {\n  const { agents: liveAgents, connected } = useAgentStatus();\n  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);\n  const [godMode, setGodMode] = useState(false);\n  const [emergencyStop, setEmergencyStop] = useState(false);\n\n  // Enhanced mock data when WebSocket is not available\n  const [agents, setAgents] = useState<Agent[]>([\n    {\n      id: 'product_research',\n      name: 'Product Research Agent',\n      status: 'running',\n      lastRun: new Date(Date.now() - 300000), // 5 minutes ago\n      performance: { speed: 95.2, successRate: 98.7, errors: 2 },\n      currentTask: 'Analyzing trending automotive accessories',\n      resources: { cpu: 23.4, memory: 67.8 }\n    },\n    {\n      id: 'inventory_forecasting',\n      name: 'Inventory Forecasting Agent',\n      status: 'running',\n      lastRun: new Date(Date.now() - 1800000), // 30 minutes ago\n      performance: { speed: 87.3, successRate: 96.4, errors: 1 },\n      currentTask: 'Updating demand predictions for Q2',\n      resources: { cpu: 45.2, memory: 82.3 }\n    },\n    {\n      id: 'pricing_optimizer',\n      name: 'Pricing Optimizer Agent',\n      status: 'idle',\n      lastRun: new Date(Date.now() - 3600000), // 1 hour ago\n      performance: { speed: 92.1, successRate: 94.8, errors: 4 },\n      resources: { cpu: 12.1, memory: 34.5 }\n    },\n    {\n      id: 'marketing_automation',\n      name: 'Marketing Automation Agent',\n      status: 'running',\n      lastRun: new Date(Date.now() - 600000), // 10 minutes ago\n      performance: { speed: 88.9, successRate: 97.2, errors: 1 },\n      currentTask: 'Generating email campaign content',\n      resources: { cpu: 38.7, memory: 71.2 }\n    },\n    {\n      id: 'customer_support',\n      name: 'Customer Support Agent',\n      status: 'error',\n      lastRun: new Date(Date.now() - 7200000), // 2 hours ago\n      performance: { speed: 76.4, successRate: 89.3, errors: 8 },\n      resources: { cpu: 8.3, memory: 28.9 }\n    },\n    {\n      id: 'order_management',\n      name: 'Order Management Agent',\n      status: 'running',\n      lastRun: new Date(Date.now() - 120000), // 2 minutes ago\n      performance: { speed: 93.7, successRate: 99.1, errors: 0 },\n      currentTask: 'Processing order fulfillment batch',\n      resources: { cpu: 29.8, memory: 55.6 }\n    }\n  ]);\n\n  // Update agents with live data when available\n  useEffect(() => {\n    if (connected && liveAgents.length > 0) {\n      setAgents(liveAgents.map(agent => ({\n        ...agent,\n        resources: {\n          cpu: Math.random() * 100,\n          memory: Math.random() * 100\n        }\n      })));\n    }\n  }, [liveAgents, connected]);\n\n  const handleAgentCommand = async (agentId: string, command: 'start' | 'stop' | 'restart') => {\n    try {\n      // Simulate API call\n      console.log(`${command}ing agent ${agentId}`);\n      \n      // Update local state optimistically\n      setAgents(prev => prev.map(agent => \n        agent.id === agentId \n          ? {\n              ...agent,\n              status: command === 'start' ? 'running' : command === 'stop' ? 'idle' : 'running',\n              lastRun: command !== 'stop' ? new Date() : agent.lastRun\n            }\n          : agent\n      ));\n    } catch (error) {\n      console.error(`Failed to ${command} agent:`, error);\n    }\n  };\n\n  const handleGodMode = () => {\n    setGodMode(!godMode);\n    if (!godMode) {\n      // Start all agents in god mode\n      setAgents(prev => prev.map(agent => ({\n        ...agent,\n        status: 'running' as const,\n        lastRun: new Date()\n      })));\n    }\n  };\n\n  const handleEmergencyStop = () => {\n    setEmergencyStop(true);\n    setAgents(prev => prev.map(agent => ({\n      ...agent,\n      status: 'idle' as const,\n      currentTask: undefined\n    })));\n    \n    setTimeout(() => setEmergencyStop(false), 3000);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running': return '#00ff41';\n      case 'idle': return '#ffaa00';\n      case 'error': return '#ff4444';\n      default: return '#888888';\n    }\n  };\n\n  const getPerformanceLevel = (performance: Agent['performance']) => {\n    const avg = (performance.speed + performance.successRate) / 2;\n    if (avg >= 95) return { level: 'Excellent', color: '#00ff41' };\n    if (avg >= 85) return { level: 'Good', color: '#ffaa00' };\n    if (avg >= 70) return { level: 'Fair', color: '#ff8800' };\n    return { level: 'Poor', color: '#ff4444' };\n  };\n\n  return (\n    <>\n      <ParticleBackground particleCount={1000} speed={0.2} color=\"#ff00ff\" />\n      \n      <motion.div \n        className=\"agents\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.8 }}\n      >\n        <div className=\"agents-header\">\n          <motion.h1 \n            className=\"page-title\"\n            initial={{ y: -50 }}\n            animate={{ y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            Agent Command Center\n          </motion.h1>\n          <motion.p \n            className=\"page-subtitle\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Multi-Agent orchestration and monitoring\n          </motion.p>\n          \n          {connected && (\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.3 }}\n              style={{ \n                display: 'inline-block', \n                background: 'rgba(255, 0, 255, 0.2)', \n                padding: '4px 12px', \n                borderRadius: '16px',\n                border: '1px solid #ff00ff',\n                fontSize: '12px',\n                fontWeight: 'bold',\n                color: '#ff00ff',\n                marginTop: '8px'\n              }}\n            >\n              🔮 NEURAL LINK ACTIVE\n            </motion.div>\n          )}\n        </div>\n\n        {/* Master Control Panel */}\n        <motion.div \n          className=\"master-control-panel\"\n          initial={{ y: 50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n        >\n          <Card title=\"Master Control Interface\" className=\"control-card\">\n            <div className=\"control-buttons\">\n              <motion.button\n                className={`god-mode-btn ${godMode ? 'active' : ''}`}\n                onClick={handleGodMode}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <span className=\"btn-icon\">⚡</span>\n                {godMode ? 'GOD MODE ACTIVE' : 'ENABLE GOD MODE'}\n              </motion.button>\n              \n              <motion.button\n                className={`emergency-stop-btn ${emergencyStop ? 'active' : ''}`}\n                onClick={handleEmergencyStop}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                disabled={emergencyStop}\n              >\n                <span className=\"btn-icon\">🛑</span>\n                {emergencyStop ? 'STOPPING...' : 'EMERGENCY STOP'}\n              </motion.button>\n              \n              <div className=\"system-stats\">\n                <div className=\"stat\">\n                  <span className=\"stat-value\">{agents.filter(a => a.status === 'running').length}</span>\n                  <span className=\"stat-label\">ACTIVE</span>\n                </div>\n                <div className=\"stat\">\n                  <span className=\"stat-value\">{agents.filter(a => a.status === 'error').length}</span>\n                  <span className=\"stat-label\">ERRORS</span>\n                </div>\n                <div className=\"stat\">\n                  <span className=\"stat-value\">{Math.round(agents.reduce((acc, a) => acc + a.performance.successRate, 0) / agents.length)}%</span>\n                  <span className=\"stat-label\">AVG SUCCESS</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </motion.div>\n\n        {/* Agent Status Cards */}\n        <motion.div \n          className=\"agents-grid\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n        >\n          <AnimatePresence>\n            {agents.map((agent, index) => {\n              const perfLevel = getPerformanceLevel(agent.performance);\n              \n              return (\n                <motion.div\n                  key={agent.id}\n                  layout\n                  initial={{ opacity: 0, y: 50, scale: 0.9 }}\n                  animate={{ opacity: 1, y: 0, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  transition={{ duration: 0.5, delay: index * 0.1 }}\n                  whileHover={{ scale: 1.02, y: -5 }}\n                  onClick={() => setSelectedAgent(agent)}\n                  className=\"agent-card-wrapper\"\n                >\n                  <Card \n                    title={agent.name} \n                    className={`agent-card ${agent.status}`}\n                  >\n                    <div className=\"agent-status-header\">\n                      <div className=\"status-indicator\">\n                        <motion.div \n                          className=\"status-dot\"\n                          style={{ backgroundColor: getStatusColor(agent.status) }}\n                          animate={{\n                            scale: agent.status === 'running' ? [1, 1.2, 1] : 1,\n                            opacity: agent.status === 'running' ? [1, 0.6, 1] : 0.8\n                          }}\n                          transition={{ \n                            duration: 2, \n                            repeat: agent.status === 'running' ? Infinity : 0 \n                          }}\n                        />\n                        <span className=\"status-text\">{agent.status.toUpperCase()}</span>\n                      </div>\n                      \n                      <div className=\"performance-badge\" style={{ color: perfLevel.color }}>\n                        {perfLevel.level}\n                      </div>\n                    </div>\n\n                    {agent.currentTask && (\n                      <motion.div \n                        className=\"current-task\"\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        transition={{ delay: 0.2 }}\n                      >\n                        <span className=\"task-label\">Current Task:</span>\n                        <span className=\"task-text\">{agent.currentTask}</span>\n                      </motion.div>\n                    )}\n\n                    <div className=\"agent-metrics\">\n                      <div className=\"metric-row\">\n                        <span className=\"metric-label\">Speed</span>\n                        <div className=\"metric-bar\">\n                          <motion.div\n                            className=\"metric-fill\"\n                            initial={{ width: 0 }}\n                            animate={{ width: `${agent.performance.speed}%` }}\n                            transition={{ duration: 1, delay: 0.3 }}\n                            style={{ backgroundColor: '#00ffff' }}\n                          />\n                        </div>\n                        <span className=\"metric-value\">{agent.performance.speed.toFixed(1)}%</span>\n                      </div>\n\n                      <div className=\"metric-row\">\n                        <span className=\"metric-label\">Success</span>\n                        <div className=\"metric-bar\">\n                          <motion.div\n                            className=\"metric-fill\"\n                            initial={{ width: 0 }}\n                            animate={{ width: `${agent.performance.successRate}%` }}\n                            transition={{ duration: 1, delay: 0.4 }}\n                            style={{ backgroundColor: '#00ff41' }}\n                          />\n                        </div>\n                        <span className=\"metric-value\">{agent.performance.successRate.toFixed(1)}%</span>\n                      </div>\n\n                      {agent.resources && (\n                        <>\n                          <div className=\"metric-row\">\n                            <span className=\"metric-label\">CPU</span>\n                            <div className=\"metric-bar\">\n                              <motion.div\n                                className=\"metric-fill\"\n                                initial={{ width: 0 }}\n                                animate={{ width: `${agent.resources.cpu}%` }}\n                                transition={{ duration: 1, delay: 0.5 }}\n                                style={{ backgroundColor: '#ff00ff' }}\n                              />\n                            </div>\n                            <span className=\"metric-value\">{agent.resources.cpu.toFixed(1)}%</span>\n                          </div>\n                          \n                          <div className=\"metric-row\">\n                            <span className=\"metric-label\">Memory</span>\n                            <div className=\"metric-bar\">\n                              <motion.div\n                                className=\"metric-fill\"\n                                initial={{ width: 0 }}\n                                animate={{ width: `${agent.resources.memory}%` }}\n                                transition={{ duration: 1, delay: 0.6 }}\n                                style={{ backgroundColor: '#ffaa00' }}\n                              />\n                            </div>\n                            <span className=\"metric-value\">{agent.resources.memory.toFixed(1)}%</span>\n                          </div>\n                        </>\n                      )}\n                    </div>\n\n                    <div className=\"agent-controls\">\n                      <motion.button\n                        className=\"control-btn start\"\n                        onClick={(e) => { e.stopPropagation(); handleAgentCommand(agent.id, 'start'); }}\n                        disabled={agent.status === 'running'}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        ▶\n                      </motion.button>\n                      \n                      <motion.button\n                        className=\"control-btn stop\"\n                        onClick={(e) => { e.stopPropagation(); handleAgentCommand(agent.id, 'stop'); }}\n                        disabled={agent.status === 'idle'}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        ⏸\n                      </motion.button>\n                      \n                      <motion.button\n                        className=\"control-btn restart\"\n                        onClick={(e) => { e.stopPropagation(); handleAgentCommand(agent.id, 'restart'); }}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        🔄\n                      </motion.button>\n                    </div>\n\n                    <div className=\"last-run\">\n                      <span>Last run: {agent.lastRun.toLocaleTimeString()}</span>\n                      {agent.performance.errors > 0 && (\n                        <span className=\"error-count\">\n                          {agent.performance.errors} errors\n                        </span>\n                      )}\n                    </div>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </AnimatePresence>\n        </motion.div>\n      </motion.div>\n    </>\n  );\n};"],"names":["PopChildMeasure","React.Component","prevProps","element","size","PopChild","children","isPresent","id","useId","ref","useRef","nonce","useContext","MotionConfigContext","useInsertionEffect","width","height","top","left","style","jsx","React.cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","useConstant","newChildrenMap","memoizedOnExitComplete","useCallback","childId","isComplete","context","useMemo","_","key","React.useEffect","PresenceContext","getChildKey","child","onlyElements","filtered","Children","isValidElement","AnimatePresence","propagate","isParentPresent","safeToRemove","usePresence","presentChildren","presentKeys","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","useIsomorphicLayoutEffect","i","exitingChildren","nextChildren","forceRender","LayoutGroupContext","Fragment","onExit","isEveryExitComplete","isExitComplete","Agents","liveAgents","connected","useAgentStatus","selectedAgent","setSelectedAgent","godMode","setGodMode","emergencyStop","setEmergencyStop","agents","setAgents","useEffect","agent","handleAgentCommand","agentId","command","prev","error","handleGodMode","handleEmergencyStop","getStatusColor","status","getPerformanceLevel","performance","avg","jsxs","ParticleBackground","motion","Card","a","acc","index","perfLevel","e"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}