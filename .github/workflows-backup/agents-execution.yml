name: 🤖 Autonomous Agent Execution - Cross-Platform Enterprise

permissions:
  contents: write
  actions: write

on:
  schedule:
    # Execute critical agents every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      agent_name:
        description: 'Specific agent to run (optional)'
        required: false
        type: string
      force_run:
        description: 'Force run even if conditions not met'
        required: false
        type: boolean
        default: false
      platform:
        description: 'Target platform'
        required: false
        default: 'windows'
        type: choice
        options:
        - windows
        - linux
        - both

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Tier 1 Critical Agents - Must run 24/7
  critical-agents:
    name: '🚨 Tier 1 Critical Agents - ${{ matrix.os }}'
    strategy:
      matrix:
        agent: [
          'inventory_pricing',
          'order_fulfillment', 
          'fraud_security',
          'analytics'
        ]
        include:
          - os: 'ubuntu-latest'
            shell: pwsh
            platform: 'windows'
          - os: 'ubuntu-latest'
            shell: bash
            platform: 'linux'
        exclude:
          - ${{ github.event.inputs.platform == 'windows' && contains(matrix.platform, 'linux') }}
          - ${{ github.event.inputs.platform == 'linux' && contains(matrix.platform, 'windows') }}
      fail-fast: false
    runs-on: ${{ fromJSON(matrix.os) }}
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 10
    defaults:
      run:
        shell: ${{ matrix.shell }}
    
    steps:
      - name: 'Structured Log - Agent Execution Start'
        run: |
          if ($IsWindows -or $env:OS -like "*Windows*") {
            Write-Host (@{level="info"; message="Agent execution started"; agent="${{ matrix.agent }}"; platform="${{ matrix.platform }}"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)
          } else {
            echo '{"level":"info","message":"Agent execution started","agent":"${{ matrix.agent }}","platform":"${{ matrix.platform }}","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'
          fi

      - name: Checkout repository with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: echo "Checking out repository..."
      
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v5
        
      - name: Set up Python with Self-Healing
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: echo "Setting up Python..."
      
      - uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3  # actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          command: |
            if ($IsWindows -or $env:OS -like "*Windows*") {
              Write-Host (@{level="info"; message="Installing Python dependencies on Windows"} | ConvertTo-Json -Compress)
              pip install -r requirements.txt
              pip install pytest-asyncio
            } else {
              echo '{"level":"info","message":"Installing Python dependencies on Linux"}'
              pip install -r requirements.txt
              pip install pytest-asyncio
            fi
      
      - name: Run health check with Self-Healing
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: |
            if ($IsWindows -or $env:OS -like "*Windows*") {
              Write-Host (@{level="info"; message="Running agent health check on Windows"; agent="${{ matrix.agent }}"} | ConvertTo-Json -Compress)
              python -c "
              import asyncio
              from orchestrator.core.orchestrator import Orchestrator
              from orchestrator.agents import *
              
              async def health_check():
                  orchestrator = Orchestrator()
                  try:
                      # Import and register agent
                      if '${{ matrix.agent }}' == 'inventory_pricing':
                          from orchestrator.agents.pricing_optimizer import PricingOptimizerAgent
                          agent = PricingOptimizerAgent()
                      elif '${{ matrix.agent }}' == 'order_fulfillment':
                          from orchestrator.agents.order_management import OrderManagementAgent
                          agent = OrderManagementAgent()
                      elif '${{ matrix.agent }}' == 'fraud_security':
                          from orchestrator.agents.security import SecurityAgent
                          agent = SecurityAgent()
                      elif '${{ matrix.agent }}' == 'analytics':
                          from orchestrator.agents.analytics import AnalyticsAgent
                          agent = AnalyticsAgent()
                      else:
                          return
                      
                      health = await agent.health_check()
                      print(f'Agent ${{ matrix.agent }} health: {health}')
                      return health.get('status') == 'ok'
                  except Exception as e:
                      print(f'Health check failed: {e}')
                      return False
              
              result = asyncio.run(health_check())
              exit(0 if result else 1)
              "
            } else {
              echo '{"level":"info","message":"Running agent health check on Linux","agent":"${{ matrix.agent }}"}'
              python -c "
              import asyncio
              from orchestrator.core.orchestrator import Orchestrator
              from orchestrator.agents import *
              
              async def health_check():
                  orchestrator = Orchestrator()
                  try:
                      # Import and register agent
                      if '${{ matrix.agent }}' == 'inventory_pricing':
                          from orchestrator.agents.pricing_optimizer import PricingOptimizerAgent
                          agent = PricingOptimizerAgent()
                      elif '${{ matrix.agent }}' == 'order_fulfillment':
                          from orchestrator.agents.order_management import OrderManagementAgent
                          agent = OrderManagementAgent()
                      elif '${{ matrix.agent }}' == 'fraud_security':
                          from orchestrator.agents.security import SecurityAgent
                          agent = SecurityAgent()
                      elif '${{ matrix.agent }}' == 'analytics':
                          from orchestrator.agents.analytics import AnalyticsAgent
                          agent = AnalyticsAgent()
                      else:
                          return
                      
                      health = await agent.health_check()
                      print(f'Agent ${{ matrix.agent }} health: {health}')
                      return health.get('status') == 'ok'
                  except Exception as e:
                      print(f'Health check failed: {e}')
                      return False
              
              result = asyncio.run(health_check())
              exit(0 if result else 1)
              "
            fi
      
      - name: Execute agent with Self-Healing Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 8
          max_attempts: 3
          retry_on: error
          command: |
            if ($IsWindows -or $env:OS -like "*Windows*") {
              Write-Host (@{level="info"; message="Executing agent on Windows"; agent="${{ matrix.agent }}"} | ConvertTo-Json -Compress)
              python scripts/execute_agent.py --agent ${{ matrix.agent }} --timeout 300
            } else {
              echo '{"level":"info","message":"Executing agent on Linux","agent":"${{ matrix.agent }}"}'
              python scripts/execute_agent.py --agent ${{ matrix.agent }} --timeout 300
            fi
        env:
          # Production secrets - Organization level
          DATABASE_URL: ${{ secrets.ORG_DATABASE_URL || secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.ORG_REDIS_URL || secrets.REDIS_URL }}
          RABBITMQ_URL: ${{ secrets.ORG_RABBITMQ_URL || secrets.RABBITMQ_URL }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.ORG_SHOPIFY_ACCESS_TOKEN || secrets.SHOPIFY_ACCESS_TOKEN }}
          SHOPIFY_SHOP_URL: ${{ secrets.ORG_SHOPIFY_SHOP_URL || secrets.SHOPIFY_SHOP_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.ORG_STRIPE_SECRET_KEY || secrets.STRIPE_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.ORG_OPENAI_API_KEY || secrets.OPENAI_API_KEY }}
          
      - name: Report execution results with Structured Logging
        if: always()
        run: |
          if ($IsWindows -or $env:OS -like "*Windows*") {
            Write-Host (@{level="info"; message="Agent execution completed"; agent="${{ matrix.agent }}"; status="${{ job.status }}"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)
            Write-Output "::notice::Agent ${{ matrix.agent }} execution completed on Windows"
          } else {
            echo '{"level":"info","message":"Agent execution completed","agent":"${{ matrix.agent }}","status":"${{ job.status }}","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'
            echo "::notice::Agent ${{ matrix.agent }} execution completed on Linux"
          fi
        
      - name: Slack notification on failure
        if: failure() && (secrets.ORG_SLACK_WEBHOOK || vars.ORG_SLACK_WEBHOOK)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ORG_SLACK_WEBHOOK || vars.ORG_SLACK_WEBHOOK }}
        run: |
          if ($IsWindows -or $env:OS -like "*Windows*") {
            Write-Host (@{level="error"; message="Critical agent execution failed, sending Slack notification"; agent="${{ matrix.agent }}"} | ConvertTo-Json -Compress)
            $slackMessage = @{
              text = "🚨 Critical Agent Execution Failed"
              attachments = @(
                @{
                  color = "danger"
                  fields = @(
                    @{ title = "Agent"; value = "${{ matrix.agent }}"; short = $true }
                    @{ title = "Platform"; value = "${{ matrix.platform }}"; short = $true }
                    @{ title = "Run ID"; value = "${{ github.run_id }}"; short = $true }
                    @{ title = "Repository"; value = "${{ github.repository }}"; short = $true }
                  )
                }
              )
            } | ConvertTo-Json -Depth 5 -Compress
            Invoke-RestMethod -Uri $env:SLACK_WEBHOOK_URL -Method Post -Body $slackMessage -ContentType "application/json"
          } else {
            echo '{"level":"error","message":"Critical agent execution failed, sending Slack notification","agent":"${{ matrix.agent }}"}'
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🚨 Critical Agent Execution Failed: ${{ matrix.agent }} on ${{ matrix.platform }} (Run #${{ github.run_id }})"}' \
              "$SLACK_WEBHOOK_URL"
          fi

      - name: 'Structured Log - Agent Complete'
        if: always()
        run: |
          if ($IsWindows -or $env:OS -like "*Windows*") {
            Write-Host (@{level="info"; message="Critical agent workflow completed"; agent="${{ matrix.agent }}"; status="${{ job.status }}"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)
          } else {
            echo '{"level":"info","message":"Critical agent workflow completed","agent":"${{ matrix.agent }}","status":"${{ job.status }}","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'
          fi

  # Tier 2 Growth Agents - Run every hour
  growth-agents:
    name: '📈 Tier 2 Growth Agents - ${{ matrix.os }}'
    strategy:
      matrix:
        agent: [
          'marketing_automation',
          'customer_support',
          'content_creation',
          'competitor_analysis',
          'supplier_management'
        ]
        include:
          - os: 'ubuntu-latest'
            shell: pwsh
            platform: 'windows'
        exclude:
          - ${{ github.event.inputs.platform == 'linux' && contains(matrix.platform, 'windows') }}
      fail-fast: false
    runs-on: ${{ fromJSON(matrix.os) }}
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: critical-agents
    timeout-minutes: 15
    defaults:
      run:
        shell: ${{ matrix.shell }}
    
    steps:
      - name: 'Structured Log - Growth Agent Start'
        run: Write-Host (@{level="info"; message="Growth agent execution started"; agent="${{ matrix.agent }}"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)

      - name: Checkout repository with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: echo "Checking out repository..."
      
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v5
        
      - name: Set up Python with Self-Healing
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: echo "Setting up Python..."
      
      - uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3  # actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          command: |
            Write-Host (@{level="info"; message="Installing Python dependencies for growth agent"} | ConvertTo-Json -Compress)
            pip install -r requirements.txt
            pip install pytest-asyncio
      
      - name: Execute agent with Self-Healing Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 12
          max_attempts: 3
          retry_on: error
          command: |
            Write-Host (@{level="info"; message="Executing growth agent"; agent="${{ matrix.agent }}"} | ConvertTo-Json -Compress)
            python scripts/execute_agent.py --agent ${{ matrix.agent }} --timeout 600
        env:
          DATABASE_URL: ${{ secrets.ORG_DATABASE_URL || secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.ORG_REDIS_URL || secrets.REDIS_URL }}
          RABBITMQ_URL: ${{ secrets.ORG_RABBITMQ_URL || secrets.RABBITMQ_URL }}
          SHOPIFY_ACCESS_TOKEN: ${{ secrets.ORG_SHOPIFY_ACCESS_TOKEN || secrets.SHOPIFY_ACCESS_TOKEN }}
          SHOPIFY_SHOP_URL: ${{ secrets.ORG_SHOPIFY_SHOP_URL || secrets.SHOPIFY_SHOP_URL }}
          OPENAI_API_KEY: ${{ secrets.ORG_OPENAI_API_KEY || secrets.OPENAI_API_KEY }}

      - name: 'Structured Log - Growth Agent Complete'
        if: always()
        run: Write-Host (@{level="info"; message="Growth agent execution completed"; agent="${{ matrix.agent }}"; status="${{ job.status }}"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)
          
  # Self-healing and monitoring
  system-health:
    name: '🔧 System Health & Self-Healing - Cross-Platform'
    strategy:
      matrix:
        include:
          - os: 'ubuntu-latest'
            shell: pwsh
            platform: 'windows'
        exclude:
          - ${{ github.event.inputs.platform == 'linux' }}
    runs-on: ${{ fromJSON(matrix.os) }}
    needs: [critical-agents, growth-agents]
    if: always()
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
    defaults:
      run:
        shell: ${{ matrix.shell }}
    
    steps:
      - name: 'Structured Log - Health Check Start'
        run: Write-Host (@{level="info"; message="System health check started"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)

      - name: Checkout repository with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: echo "Checking out repository..."
      
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v5
        
      - name: Set up Python with Self-Healing
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: echo "Setting up Python..."
      
      - uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3  # actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          command: |
            Write-Host (@{level="info"; message="Installing dependencies for health check"} | ConvertTo-Json -Compress)
            pip install -r requirements.txt
            pip install pytest-asyncio
      
      - name: Run system health check with Retry
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3
        with:
          timeout_minutes: 8
          max_attempts: 3
          retry_on: error
          command: |
            Write-Host (@{level="info"; message="Running comprehensive system health check"} | ConvertTo-Json -Compress)
            python scripts/health_check.py --comprehensive
        env:
          DATABASE_URL: ${{ secrets.ORG_DATABASE_URL || secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.ORG_REDIS_URL || secrets.REDIS_URL }}
          APP_URL: ${{ secrets.ORG_APP_URL || secrets.APP_URL }}
          
      - name: Auto-generate improvement PRs
        if: success()
        run: |
          Write-Host (@{level="info"; message="Running auto-improvement scan"} | ConvertTo-Json -Compress)
          python scripts/auto_improvement.py --scan --create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN || github.token }}
          
      - name: Slack health report
        if: always() && (secrets.ORG_SLACK_WEBHOOK || vars.ORG_SLACK_WEBHOOK)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ORG_SLACK_WEBHOOK || vars.ORG_SLACK_WEBHOOK }}
        run: |
          Write-Host (@{level="info"; message="Sending health report to Slack"} | ConvertTo-Json -Compress)
          $status = "${{ job.status }}"
          $color = if ($status -eq "success") { "good" } else { "danger" }
          $emoji = if ($status -eq "success") { "✅" } else { "❌" }
          
          $slackMessage = @{
            text = "$emoji Royal Equips Empire Health Check"
            attachments = @(
              @{
                color = $color
                fields = @(
                  @{ title = "Status"; value = $status; short = $true }
                  @{ title = "Platform"; value = "${{ matrix.platform }}"; short = $true }
                  @{ title = "Run ID"; value = "${{ github.run_id }}"; short = $true }
                  @{ title = "Timestamp"; value = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"); short = $true }
                )
              }
            )
          } | ConvertTo-Json -Depth 5 -Compress
          Invoke-RestMethod -Uri $env:SLACK_WEBHOOK_URL -Method Post -Body $slackMessage -ContentType "application/json"

      - name: 'Structured Log - Health Check Complete'
        if: always()
        run: Write-Host (@{level="info"; message="System health check completed"; status="${{ job.status }}"; timestamp=(Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")} | ConvertTo-Json -Compress)
