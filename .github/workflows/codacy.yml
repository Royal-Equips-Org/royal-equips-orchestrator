# üè∞ Royal Equips Enterprise Multi-Agent Security & Quality Orchestrator
# 
# This enterprise-grade workflow orchestrates autonomous security, quality, and compliance agents
# for large-scale e-commerce operations. Features multi-agent parallelization, self-healing,
# structured observability, and full GDPR/SOC2/ISO27001 compliance.
#
# Multi-Agent Architecture:
# - security-scan-agent: Codacy + secret scanning + SARIF upload
# - lint-agent: Ruff (Python) + ESLint (JS/TS) with auto-fix
# - test-agent: Pytest (Python) + Jest (JS/TS) with coverage
# - supply-chain-agent: npm audit + pip audit + dependency scanning
# - observability-agent: structured logging + metrics + compliance hooks

name: üè∞ Royal Equips Multi-Agent Security Orchestrator

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '23 2 * * 3'  # Weekly Wednesday 02:23 UTC
  workflow_dispatch:
    inputs:
      agent_focus:
        description: 'Focus on specific agent (all, security, lint, test, supply-chain, observability)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - security
          - lint
          - test
          - supply-chain
          - observability

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

# Circuit breaker and fail-fast configuration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Compliance and audit configuration
  AUDIT_ENABLED: true
  COMPLIANCE_STANDARDS: "GDPR,SOC2,ISO27001"
  SECURITY_PLAYBOOK_URL: "https://github.com/Royal-Equips-Org/security-playbook"
  LOG_LEVEL: "INFO"
  AGENT_TIMEOUT_MINUTES: 15
  MAX_RETRY_ATTEMPTS: 3

jobs:
  # üîê Security Scan Agent - Parallel security scanning with self-healing
  security-scan-agent:
    name: üîê Security Scan Agent
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.agent_focus == 'all' || github.event.inputs.agent_focus == 'security' || github.event.inputs.agent_focus == ''
    strategy:
      fail-fast: false
      matrix:
        scan_type: [codacy, secrets, dependencies]
    
    steps:
      - name: üìä Structured Log - Agent Start
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","scan_type":"${{ matrix.scan_type }}","event":"agent_start","workflow_run_id":"${{ github.run_id }}","compliance_standards":"${{ env.COMPLIANCE_STANDARDS }}"}'

      - name: üîç Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v4.1.2 # or actions/checkout@b4b7c6c9c8e6e8e2e8e8e8e8e8e8e8e8e8e8e8e8 (replace with actual SHA from https://github.com/actions/checkout/releases)
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: üîê Validate Organization Secrets
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.ORG_CODACY_PROJECT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"validating_secrets","scan_type":"${{ matrix.scan_type }}"}'
          
          # Validate required org secrets exist (without exposing values)
          if [ -z "$CODACY_PROJECT_TOKEN" ] && [ "${{ matrix.scan_type }}" = "codacy" ]; then
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"error","agent":"security-scan","event":"secret_validation_failed","secret":"ORG_CODACY_PROJECT_TOKEN","scan_type":"${{ matrix.scan_type }}"}'
            exit 1
          fi
          
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"secrets_validated","scan_type":"${{ matrix.scan_type }}"}'

      - name: üîê Codacy Security Analysis with Self-Healing
        if: matrix.scan_type == 'codacy'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"codacy_scan_start","attempt":"${{ github.run_attempt }}"}'
            
            # Execute Codacy Analysis CLI with specific pinned version
            docker run --rm \
              -v "$PWD":/src \
              -e CODACY_PROJECT_TOKEN="${{ secrets.ORG_CODACY_PROJECT_TOKEN }}" \
              codacy/codacy-analysis-cli:7.11.12 \
              analyze \
              --directory /src \
              --format sarif \
              --output /src/codacy-results.sarif \
              --verbose \
              --max-allowed-issues 2147483647 \
              --gh-code-scanning-compat
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"codacy_scan_complete","sarif_generated":true}'

      - name: üïµÔ∏è Secret Scanning with Gitleaks
        if: matrix.scan_type == 'secrets'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"secret_scan_start"}'
            
            # Install gitleaks pinned version
            wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
            tar -xzf gitleaks_8.18.4_linux_x64.tar.gz
            chmod +x gitleaks
            
            # Run secret scan with SARIF output
            ./gitleaks detect --source . --report-format sarif --report-path gitleaks-results.sarif --verbose --exit-code 0
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"secret_scan_complete","sarif_generated":true}'

      - name: üîç Dependency Vulnerability Scanning
        if: matrix.scan_type == 'dependencies'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"dependency_scan_start"}'
            
            # Install Trivy pinned version for dependency scanning
            wget -q https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Linux-64bit.tar.gz
            tar -xzf trivy_0.48.3_Linux-64bit.tar.gz
            chmod +x trivy
            
            # Scan dependencies with SARIF output
            ./trivy fs --format sarif --output dependency-results.sarif --severity HIGH,CRITICAL .
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"dependency_scan_complete","sarif_generated":true}'

      - name: üì§ Upload SARIF Results with Circuit Breaker
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: 5
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"sarif_upload_start","scan_type":"${{ matrix.scan_type }}"}'
            
            # Upload appropriate SARIF file based on scan type
            if [ "${{ matrix.scan_type }}" = "codacy" ] && [ -f "codacy-results.sarif" ]; then
              echo "Uploading Codacy SARIF results..."
              # Use GitHub CLI for better error handling
              gh api --method POST /repos/${{ github.repository }}/code-scanning/sarifs \
                --field sarif="$(gzip -c codacy-results.sarif | base64 -w0)" \
                --field ref="${{ github.ref }}" \
                --field commit_sha="${{ github.sha }}"
            elif [ "${{ matrix.scan_type }}" = "secrets" ] && [ -f "gitleaks-results.sarif" ]; then
              echo "Uploading Gitleaks SARIF results..."
              gh api --method POST /repos/${{ github.repository }}/code-scanning/sarifs \
                --field sarif="$(gzip -c gitleaks-results.sarif | base64 -w0)" \
                --field ref="${{ github.ref }}" \
                --field commit_sha="${{ github.sha }}"
            elif [ "${{ matrix.scan_type }}" = "dependencies" ] && [ -f "dependency-results.sarif" ]; then
              echo "Uploading Dependency SARIF results..."
              gh api --method POST /repos/${{ github.repository }}/code-scanning/sarifs \
                --field sarif="$(gzip -c dependency-results.sarif | base64 -w0)" \
                --field ref="${{ github.ref }}" \
                --field commit_sha="${{ github.sha }}"
            fi
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","event":"sarif_upload_complete","scan_type":"${{ matrix.scan_type }}"}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Structured Log - Agent Complete
        if: always()
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"security-scan","scan_type":"${{ matrix.scan_type }}","event":"agent_complete","status":"${{ job.status }}","workflow_run_id":"${{ github.run_id }}"}'

  # üßπ Lint Agent - Multi-language linting with auto-fix
  lint-agent:
    name: üßπ Lint Agent
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.agent_focus == 'all' || github.event.inputs.agent_focus == 'lint' || github.event.inputs.agent_focus == ''
    strategy:
      fail-fast: false
      matrix:
        language: [python, javascript]
    
    steps:
      - name: üìä Structured Log - Agent Start
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"lint","language":"${{ matrix.language }}","event":"agent_start","workflow_run_id":"${{ github.run_id }}"}'

      - name: üîç Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v4

      - name: üêç Setup Python Environment
        if: matrix.language == 'python'
        uses: actions/setup-python@bba65e51ff35d50c6dbaaacd8a4681db13aa7cb4  # actions/setup-python@v5.0.0
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: üü® Setup Node.js Environment
        if: matrix.language == 'javascript'
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903  # actions/setup-node@v4.0.1
        with:
          node-version: '20'
          cache: 'npm'

      - name: üêç Python Linting with Ruff
        if: matrix.language == 'python'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"lint","language":"python","event":"ruff_lint_start"}'
            
            # Install Ruff pinned version
            pip install ruff==0.1.8
            
            # Run Ruff linting with auto-fix
            ruff check --fix --format=json --output-file=ruff-results.json . || true
            ruff format --diff .
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"lint","language":"python","event":"ruff_lint_complete"}'

      - name: üü® JavaScript/TypeScript Linting with ESLint
        if: matrix.language == 'javascript'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"lint","language":"javascript","event":"eslint_start"}'
            
            # Install dependencies and run ESLint
            npm ci
            npx eslint . --ext .js,.ts,.tsx --format=json --output-file=eslint-results.json --fix || true
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"lint","language":"javascript","event":"eslint_complete"}'

      - name: üì§ Upload Lint Results
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # actions/upload-artifact@v4.3.0
        with:
          name: lint-results-${{ matrix.language }}
          path: |
            *-results.json
          retention-days: 30

      - name: üìä Structured Log - Agent Complete
        if: always()
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"lint","language":"${{ matrix.language }}","event":"agent_complete","status":"${{ job.status }}","workflow_run_id":"${{ github.run_id }}"}'

  # üß™ Test Agent - Multi-language testing with coverage
  test-agent:
    name: üß™ Test Agent
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.agent_focus == 'all' || github.event.inputs.agent_focus == 'test' || github.event.inputs.agent_focus == ''
    strategy:
      fail-fast: false
      matrix:
        language: [python, javascript]
        include:
          - language: python
            test_framework: pytest
            coverage_tool: coverage
          - language: javascript
            test_framework: jest
            coverage_tool: jest
    
    steps:
      - name: üìä Structured Log - Agent Start
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"test","language":"${{ matrix.language }}","framework":"${{ matrix.test_framework }}","event":"agent_start","workflow_run_id":"${{ github.run_id }}"}'

      - name: üîç Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v4

      - name: üêç Setup Python Environment
        if: matrix.language == 'python'
        uses: actions/setup-python@bba65e51ff35d50c6dbaaacd8a4681db13aa7cb4  # actions/setup-python@v5.0.0
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: üü® Setup Node.js Environment
        if: matrix.language == 'javascript'
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903  # actions/setup-node@v4.0.1
        with:
          node-version: '20'
          cache: 'npm'

      - name: üêç Python Testing with Pytest
        if: matrix.language == 'python'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"test","language":"python","event":"pytest_start"}'
            
            # Install test dependencies
            pip install pytest==7.4.3 pytest-cov==4.1.0 pytest-json-report==1.5.0
            pip install -r requirements.txt || true
            
            # Run tests with coverage and JSON output
            pytest --cov=. --cov-report=json --cov-report=html --json-report --json-report-file=pytest-results.json || true
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"test","language":"python","event":"pytest_complete"}'

      - name: üü® JavaScript Testing with Jest
        if: matrix.language == 'javascript'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"test","language":"javascript","event":"jest_start"}'
            
            # Install dependencies and run Jest
            npm ci
            npm test -- --coverage --json --outputFile=jest-results.json --passWithNoTests || true
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"test","language":"javascript","event":"jest_complete"}'

      - name: üì§ Upload Test Results & Coverage
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # actions/upload-artifact@v4.3.0
        with:
          name: test-results-${{ matrix.language }}
          path: |
            *-results.json
            coverage.json
            htmlcov/
          retention-days: 30

      - name: üìä Structured Log - Agent Complete
        if: always()
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"test","language":"${{ matrix.language }}","event":"agent_complete","status":"${{ job.status }}","workflow_run_id":"${{ github.run_id }}"}'

  # ‚õìÔ∏è Supply Chain Agent - Comprehensive dependency auditing
  supply-chain-agent:
    name: ‚õìÔ∏è Supply Chain Agent
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.agent_focus == 'all' || github.event.inputs.agent_focus == 'supply-chain' || github.event.inputs.agent_focus == ''
    strategy:
      fail-fast: false
      matrix:
        audit_type: [npm, pip, container]
    
    steps:
      - name: üìä Structured Log - Agent Start
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"${{ matrix.audit_type }}","event":"agent_start","workflow_run_id":"${{ github.run_id }}"}'

      - name: üîç Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v4

      - name: üì¶ NPM Audit
        if: matrix.audit_type == 'npm'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"npm","event":"npm_audit_start"}'
            
            # Run npm audit with JSON output
            npm audit --json --audit-level moderate > npm-audit-results.json || true
            npm audit --audit-level high
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"npm","event":"npm_audit_complete"}'

      - name: üêç Python Dependencies Audit
        if: matrix.audit_type == 'pip'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"pip","event":"pip_audit_start"}'
            
            # Install and run pip-audit
            pip install pip-audit==2.6.1
            pip-audit --format=json --output=pip-audit-results.json || true
            pip-audit --desc
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"pip","event":"pip_audit_complete"}'

      - name: üê≥ Container Security Audit
        if: matrix.audit_type == 'container'
        uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e  # nick-fields/retry@v3.0.0
        with:
          timeout_minutes: ${{ env.AGENT_TIMEOUT_MINUTES }}
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_on: error
          command: |
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"container","event":"container_audit_start"}'
            
            # Install Trivy for container scanning
            wget -q https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Linux-64bit.tar.gz
            tar -xzf trivy_0.48.3_Linux-64bit.tar.gz
            chmod +x trivy
            
            # Scan Dockerfile and docker-compose if they exist
            if [ -f "Dockerfile" ]; then
              ./trivy config --format json --output docker-audit-results.json Dockerfile
            fi
            if [ -f "docker-compose.yml" ]; then
              ./trivy config --format json --output docker-compose-audit-results.json docker-compose.yml
            fi
            
            echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"container","event":"container_audit_complete"}'

      - name: üì§ Upload Audit Results
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # actions/upload-artifact@v4.3.0
        with:
          name: supply-chain-audit-${{ matrix.audit_type }}
          path: |
            *-audit-results.json
          retention-days: 30

      - name: üìä Structured Log - Agent Complete
        if: always()
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"supply-chain","audit_type":"${{ matrix.audit_type }}","event":"agent_complete","status":"${{ job.status }}","workflow_run_id":"${{ github.run_id }}"}'

  # üìä Observability Agent - Metrics, compliance, and reporting
  observability-agent:
    name: üìä Observability Agent
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.agent_focus == 'all' || github.event.inputs.agent_focus == 'observability' || github.event.inputs.agent_focus == ''
    needs: [security-scan-agent, lint-agent, test-agent, supply-chain-agent]
    
    steps:
      - name: üìä Structured Log - Agent Start
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"agent_start","workflow_run_id":"${{ github.run_id }}","compliance_standards":"${{ env.COMPLIANCE_STANDARDS }}"}'

      - name: üîç Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # actions/checkout@v4

      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: ./artifacts

      - name: üìä Generate Comprehensive Report
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"report_generation_start"}'
          
          # Create comprehensive JSON report
          cat > royal-equips-security-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run_id": "${{ github.run_id }}",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit_sha": "${{ github.sha }}",
            "compliance_standards": "${{ env.COMPLIANCE_STANDARDS }}",
            "security_playbook_url": "${{ env.SECURITY_PLAYBOOK_URL }}",
            "agent_results": {
              "security_scan": "${{ needs.security-scan-agent.result }}",
              "lint": "${{ needs.lint-agent.result }}",
              "test": "${{ needs.test-agent.result }}",
              "supply_chain": "${{ needs.supply-chain-agent.result }}"
            },
            "artifacts_collected": $(find ./artifacts -name "*.json" | wc -l),
            "overall_status": "$(if [[ "${{ needs.security-scan-agent.result }}" == "success" && "${{ needs.lint-agent.result }}" == "success" && "${{ needs.test-agent.result }}" == "success" && "${{ needs.supply-chain-agent.result }}" == "success" ]]; then echo "success"; else echo "failure"; fi)"
          }
          EOF
          
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"report_generated","report_file":"royal-equips-security-report.json"}'

      - name: üîê Security Playbook Integration
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"security_playbook_integration","playbook_url":"${{ env.SECURITY_PLAYBOOK_URL }}"}'
          
          # Create link to central security playbook
          echo "# üîê Security Playbook Integration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow follows the Royal Equips Organization security standards:" >> $GITHUB_STEP_SUMMARY
          echo "- [Central Security Playbook](${{ env.SECURITY_PLAYBOOK_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- Compliance Standards: ${{ env.COMPLIANCE_STANDARDS }}" >> $GITHUB_STEP_SUMMARY
          echo "- Audit Trail ID: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

      - name: üìä Compliance Audit Logging
        env:
          ORG_AUDIT_WEBHOOK: ${{ secrets.ORG_AUDIT_WEBHOOK }}
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"compliance_audit_start"}'
          
          # Generate compliance audit record
          AUDIT_RECORD=$(cat <<EOF
          {
            "audit_id": "${{ github.run_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "workflow": "${{ github.workflow }}",
            "compliance_standards": "${{ env.COMPLIANCE_STANDARDS }}",
            "security_results": {
              "security_scan": "${{ needs.security-scan-agent.result }}",
              "lint": "${{ needs.lint-agent.result }}",
              "test": "${{ needs.test-agent.result }}",
              "supply_chain": "${{ needs.supply-chain-agent.result }}"
            },
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "traceability": {
              "commit_sha": "${{ github.sha }}",
              "run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOF
          )
          
          # Send audit record if webhook is available
          if [ -n "$ORG_AUDIT_WEBHOOK" ]; then
            curl -X POST -H "Content-Type: application/json" -d "$AUDIT_RECORD" "$ORG_AUDIT_WEBHOOK" || true
          fi
          
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"compliance_audit_complete"}'

      - name: üì§ Upload Final Report
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874  # actions/upload-artifact@v4.3.0
        with:
          name: royal-equips-security-report
          path: |
            royal-equips-security-report.json
          retention-days: 90

      - name: üö® Failure Notification
        if: failure() || needs.security-scan-agent.result == 'failure' || needs.lint-agent.result == 'failure' || needs.test-agent.result == 'failure' || needs.supply-chain-agent.result == 'failure'
        env:
          SLACK_WEBHOOK: ${{ secrets.ORG_SLACK_WEBHOOK }}
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"error","agent":"observability","event":"workflow_failure_notification"}'
          
          # Send failure notification if webhook is available
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"üö® Royal Equips Security Workflow Failed - Run #${{ github.run_id }} - Repository: ${{ github.repository }}"}' \
              "$SLACK_WEBHOOK" || true
          fi

      - name: üìä Structured Log - Agent Complete
        if: always()
        run: |
          echo '{"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'","level":"info","agent":"observability","event":"agent_complete","status":"${{ job.status }}","workflow_run_id":"${{ github.run_id }}","overall_workflow_status":"$(if [[ "${{ needs.security-scan-agent.result }}" == "success" && "${{ needs.lint-agent.result }}" == "success" && "${{ needs.test-agent.result }}" == "success" && "${{ needs.supply-chain-agent.result }}" == "success" ]]; then echo "success"; else echo "failure"; fi)"}'
