# Demonstration workflow showing the runtime logs fix in action
name: 🔧 Runtime Logs Fix Demo

on:
  workflow_dispatch:
    inputs:
      demo_type:
        description: 'Type of demo to run'
        required: true
        default: 'success'
        type: choice
        options:
        - success
        - with_blocked_events
        - comprehensive_test

permissions:
  contents: read

jobs:
  # Demonstrate the original problem and the fix
  demonstrate-fix:
    name: 🎯 Demonstrate Runtime Logs Fix
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 🔧 Set git user identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: 📝 Create Runtime Logs (The Fix!)
        run: |
          echo "🔧 Creating runtime logs to prevent artifact upload failures..."
          
          # Make scripts executable
          chmod +x scripts/ensure-runtime-logs.sh
          chmod +x scripts/runtime_logger.py
          
          # Create runtime logs directory
          mkdir -p /home/runner/work/_temp/runtime-logs
          
          # Generate logs based on demo type
          case "${{ inputs.demo_type }}" in
            "success")
              echo "✅ Generating successful runtime logs (no blocked events)"
              python scripts/runtime_logger.py --verbose
              ;;
            "with_blocked_events")
              echo "⚠️ Generating runtime logs with sample blocked events"
              python scripts/runtime_logger.py \
                --add-event "workflow:Sample workflow blocked event" \
                --add-event "dependency:Mock dependency conflict detected" \
                --add-event "security:Sample security scan alert" \
                --verbose
              ;;
            "comprehensive_test")
              echo "🧪 Running comprehensive test with multiple event types"
              python scripts/runtime_logger.py \
                --add-event "critical:Critical system failure simulation" \
                --add-event "warning:Resource usage warning" \
                --add-event "info:Informational event logged" \
                --verbose
              ;;
          esac
          
      - name: ✅ Verify Runtime Logs Exist
        run: |
          echo "🔍 Verifying runtime logs were created..."
          
          LOGS_DIR="/home/runner/work/_temp/runtime-logs"
          
          if [ -d "$LOGS_DIR" ]; then
            echo "✅ Runtime logs directory exists"
            ls -la "$LOGS_DIR"
          else
            echo "❌ Runtime logs directory missing"
            exit 1
          fi
          
          if [ -f "$LOGS_DIR/blocked.jsonl" ]; then
            echo "✅ blocked.jsonl exists ($(stat -c%s "$LOGS_DIR/blocked.jsonl") bytes)"
          else
            echo "❌ blocked.jsonl missing - this would cause the original failure!"
            exit 1
          fi
          
          if [ -f "$LOGS_DIR/blocked.md" ]; then
            echo "✅ blocked.md exists ($(stat -c%s "$LOGS_DIR/blocked.md") bytes)"
          else
            echo "❌ blocked.md missing - this would cause the original failure!"
            exit 1
          fi
          
      - name: 📊 Display Log Contents
        run: |
          echo "📊 Runtime Logs Contents Preview"
          echo "================================="
          
          echo ""
          echo "🔍 blocked.jsonl contents:"
          echo "------------------------"
          cat /home/runner/work/_temp/runtime-logs/blocked.jsonl
          
          echo ""
          echo "🔍 blocked.md contents (first 30 lines):"
          echo "---------------------------------------"
          head -30 /home/runner/work/_temp/runtime-logs/blocked.md
          
      - name: 🚀 Upload Runtime Logs (This Now Works!)
        uses: actions/upload-artifact@v4
        with:
          name: runtime-logs-demo-${{ inputs.demo_type }}-${{ github.run_number }}
          path: /home/runner/work/_temp/runtime-logs/
          retention-days: 3
          if-no-files-found: error  # This will succeed now!
          
      - name: 🎉 Success Summary
        run: |
          echo "🎉 SUCCESS! Runtime Logs Fix Demonstrated"
          echo "========================================"
          echo ""
          echo "✅ **Problem Solved:**"
          echo "   - Runtime logs directory created successfully"
          echo "   - blocked.jsonl file generated"
          echo "   - blocked.md report created"
          echo "   - Artifact upload completed without errors"
          echo ""
          echo "🔧 **Fix Applied:**"
          echo "   - Created runtime_logger.py script for robust log generation"
          echo "   - Added ensure-runtime-logs.sh for simple shell-based creation"
          echo "   - Implemented proper error handling and file existence checks"
          echo "   - Added if-no-files-found: warn/error flags to artifact uploads"
          echo ""
          echo "🚀 **Result:**"
          echo "   - No more 'No files were found' artifact upload failures"
          echo "   - Comprehensive logging and reporting system in place"
          echo "   - Self-healing workflow infrastructure operational"
          echo ""
          echo "**Demo Type:** ${{ inputs.demo_type }}"
          echo "**Runtime:** $(date -u)"
          echo "**Status:** ✅ ALL SYSTEMS OPERATIONAL"

  # Call the reusable workflow to demonstrate it works
  test-reusable-workflow:
    name: 🧪 Test Reusable Runtime Logs Workflow
    uses: ./.github/workflows/ensure-runtime-logs.yml
    with:
      runtime_logs_dir: '/home/runner/work/_temp/runtime-logs-reusable'
      create_sample_events: true

  # Final validation
  validation-summary:
    name: 📋 Validation Summary
    runs-on: ubuntu-latest
    needs: [demonstrate-fix, test-reusable-workflow]
    if: always()
    
    steps:
      - name: 🎯 Final Validation Report
        run: |
          echo "# 🎯 Runtime Logs Fix Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Main Demo | ${{ needs.demonstrate-fix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Reusable Workflow | ${{ needs.test-reusable-workflow.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.demonstrate-fix.result }}" == "success" && "${{ needs.test-reusable-workflow.result }}" == "success" ]]; then
            echo "## ✅ SUCCESS - All Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **The runtime logs fix is working perfectly!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 What Was Fixed:" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Runtime logs are now always generated" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Artifact uploads have proper error handling" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Workflow failures due to missing files prevented" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Self-healing infrastructure operational" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed jobs and address any issues." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Royal Equips Empire - Autonomous Infrastructure* 🚀" >> $GITHUB_STEP_SUMMARY