name: üß™ Build & Test

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Flask API Build & Test
  api-test:
    name: üêç Flask API Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-flask.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-flask.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up test environment
        run: |
          export POSTGRES_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379/1"
          export FLASK_ENV="testing"
          export SECRET_KEY="test-secret-key"
          export JWT_SECRET="test-jwt-secret"

      - name: Run linting
        run: |
          pip install ruff black mypy
          ruff check app/ --fix
          black --check app/
          mypy app/ --ignore-missing-imports

      - name: Run tests with coverage
        run: |
          export POSTGRES_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export REDIS_URL="redis://localhost:6379/1"
          export FLASK_ENV="testing"
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          COVERAGE_PROCESS_START: .coveragerc

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: api
          name: api-coverage
          fail_ci_if_error: false

  # React Frontend Build & Test
  frontend-test:
    name: ‚öõÔ∏è React Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/control-center/package-lock.json

      - name: Install dependencies
        working-directory: apps/control-center
        run: npm ci

      - name: Run linting
        working-directory: apps/control-center
        run: |
          npm run lint
          npm run type-check

      - name: Run tests (when available)
        working-directory: apps/control-center
        run: |
          # npm test -- --coverage --watchAll=false
          echo "Frontend tests will be added in future iterations"

      - name: Build application
        working-directory: apps/control-center
        run: npm run build

      - name: Check build size
        working-directory: apps/control-center
        run: |
          echo "Build completed successfully"
          ls -la dist/
          du -sh dist/

  # Integration Tests
  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [api-test, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start all services
        run: |
          docker-compose -f infra/docker-compose.yaml up -d
          sleep 60

      - name: Wait for services
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:10000/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'

      - name: Run integration tests
        run: |
          # Basic smoke tests
          curl -f http://localhost:10000/health
          curl -f http://localhost:10000/metrics
          curl -f http://localhost:5173
          
          # Test API endpoints
          curl -f http://localhost:10000/agents
          curl -f http://localhost:10000/shopify/status
          
          echo "‚úÖ Integration tests passed"

      - name: Collect logs
        if: failure()
        run: |
          docker-compose -f infra/docker-compose.yaml logs > integration-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: integration-logs.txt

      - name: Stop services
        if: always()
        run: docker-compose -f infra/docker-compose.yaml down

  # Docker Build
  docker-build:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: [api-test, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/Dockerfile.api
          push: false
          tags: aria-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Web image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/control-center
          file: ./infra/Dockerfile.web
          push: false
          tags: aria-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build Summary
  build-summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: [api-test, frontend-test, integration-test, docker-build]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "üß™ Build & Test Results:"
          echo "API Tests: ${{ needs.api-test.result }}"
          echo "Frontend Tests: ${{ needs.frontend-test.result }}"
          echo "Integration Tests: ${{ needs.integration-test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.api-test.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-test.result }}" != "success" ]] || \
             [[ "${{ needs.integration-test.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "‚ùå Build FAILED"
            exit 1
          fi
          
          echo "‚úÖ All builds PASSED"