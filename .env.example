# Example environment file for Royal Equips Orchestrator (Flask v2.0)
#
# Copy this file to `.env` and fill in your own values. Do not commit
# secrets back to version control. When deploying on Render, these
# variables can be set via the dashboard and marked as secrets.

# Flask Application Configuration  
FLASK_ENV=development
# FLASK_ENV=production (for production)
# FLASK_ENV=testing (for testing)

SECRET_KEY=dev-secret-key-change-in-production

# Server Configuration
PORT=10000
HOST=0.0.0.0

# Application Settings
APP_NAME=Royal Equips Orchestrator

# Command Center Configuration
COMMAND_CENTER_URL=/docs

# Feature Flags
ENABLE_METRICS=true
ENABLE_STREAMING=true

# Circuit Breaker Configuration
CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60

# Shopify credentials
SHOPIFY_API_KEY=
SHOPIFY_API_SECRET=
SHOP_NAME=

# Product Research Agent Configuration
PRODUCT_RESEARCH_INTERVAL=3600
AUTODS_API_KEY=
AUTODS_API_SECRET=
SPOCKET_API_KEY=
SPOCKET_API_SECRET=

# OpenAI API key for customer support agent
OPENAI_API_KEY=

# Google BigQuery configuration for analytics export
BIGQUERY_PROJECT_ID=
BIGQUERY_DATASET=
BIGQUERY_TABLE=

# GitHub Token for integrations
GITHUB_TOKEN=

# Database connection URL (optional, for future use)
DATABASE_URL=

# Logging Configuration
LOG_LEVEL=INFO

# Legacy FastAPI Compatibility (deprecated but maintained)
APP_TYPE=flask
APP_PATH=wsgi:app
DEBUG=false
SERVICE_VERSION=2.0.0

# Holographic Control Center configuration (React/Admin panel)
CONTROL_CENTER_VARIANT=holographic
VOICE_ENABLED=true
POLL_SECONDS=30
OPENAI_MODEL=gpt-4o-mini
WHISPER_MODEL=whisper-1

# Health check configuration
SUPPRESS_HEALTH_LOGS=true
DISABLE_ACCESS_LOG=false

# ==============================================================================
# AUTONOMOUS DEVOPS COMMANDER CONFIGURATION
# ==============================================================================

# GPG Signing Configuration
GPG_KEY_ID=
VAULT_URL=
VAULT_ENABLED=false

# DevOps Operation Settings
DEVOPS_SCAN_INTERVAL=15
DEVOPS_MAX_RETRIES=5
DEVOPS_FORCE_PUSH=false
DEVOPS_AUTO_PR=true

# Repository Configuration  
REPO_PATH=.
TARGET_BRANCHES=main,master,develop

# Integration Settings
EMPIRE_INTEGRATION=true
HEALTH_CHECK_PORT=8181

# Audit and Security
AUDIT_LOG_PATH=logs/devops_audit.jsonl
AUDIT_RETENTION_DAYS=90
ENCRYPTION_ENABLED=true
MAX_CONCURRENT_OPS=3

# AI Enhancement (uses same OpenAI key as above)
# OPENAI_API_KEY is defined above for customer support agent

# ==============================================================================
# SENTRY ERROR MONITORING CONFIGURATION
# ==============================================================================

# Backend Sentry Configuration (Python/Flask)
SENTRY_DSN=https://eb76a0bb94e0ad8f6301a70ce1e8070a@o4509339504345088.ingest.de.sentry.io/4510116359897168
ENVIRONMENT=production
SENTRY_TRACES_SAMPLE_RATE=1.0
SENTRY_PROFILES_SAMPLE_RATE=1.0
RELEASE_VERSION=v1.0.0

# Frontend Sentry Configuration (React/TypeScript)
# Get your frontend DSN from: https://sentry.io/settings/YOUR_ORG/projects/YOUR_REACT_PROJECT/keys/
VITE_SENTRY_DSN=
VITE_ENVIRONMENT=production
VITE_SENTRY_TRACES_SAMPLE_RATE=1.0
VITE_RELEASE_VERSION=v1.0.0

# Sentry Configuration Notes:
# - Backend DSN is already configured for your Python/Flask project
# - Create a separate React project in Sentry for frontend monitoring
# - Set VITE_SENTRY_DSN to your React project's DSN
# - Use different DSNs for backend and frontend for better separation
# - Adjust sample rates (0.0-1.0) based on traffic and budget
# - See SENTRY_INTEGRATION.md for complete setup instructions