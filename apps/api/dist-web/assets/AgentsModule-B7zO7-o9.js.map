{"version":3,"file":"AgentsModule-B7zO7-o9.js","sources":["../../../../node_modules/.pnpm/lucide-react@0.446.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/plus.js","../../../../node_modules/.pnpm/lucide-react@0.446.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/square.js","../../src/modules/agents/AgentsModule.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Plus = createLucideIcon(\"Plus\", [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"M12 5v14\", key: \"s699le\" }]\n]);\n\nexport { Plus as default };\n//# sourceMappingURL=plus.js.map\n","/**\n * @license lucide-react v0.446.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Square = createLucideIcon(\"Square\", [\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"3\", rx: \"2\", key: \"afitv7\" }]\n]);\n\nexport { Square as default };\n//# sourceMappingURL=square.js.map\n","import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  Users, \n  Activity, \n  Play, \n  Pause, \n  Square,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Cpu,\n  Zap,\n  MessageSquare,\n  Settings,\n  Plus\n} from 'lucide-react';\nimport { useEmpireStore } from '../../store/empire-store';\n\ninterface Agent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'error' | 'stopped';\n  health: number;\n  lastActivity: string;\n  totalTasks: number;\n  completedTasks: number;\n  errorCount: number;\n  performance: {\n    avgResponseTime: number;\n    successRate: number;\n    throughput: number;\n  };\n  capabilities: string[];\n}\n\ninterface AgentSession {\n  id: string;\n  status: string;\n  created_at: string;\n}\n\nexport default function AgentsModule() {\n  const [agents, setAgents] = useState<Agent[]>([]);\n  const [sessions, setSessions] = useState<AgentSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);\n  const { isConnected } = useEmpireStore();\n\n  // Fetch real agent data from backend\n  const fetchAgentData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Fetch from AIRA agents endpoint\n      const agentsResponse = await fetch('/api/empire/agents');\n      let agentsData = [];\n      \n      if (agentsResponse.ok) {\n        agentsData = await agentsResponse.json();\n      }\n\n      // Fetch active agent sessions from Flask backend\n      const sessionsResponse = await fetch('/api/agents/sessions');\n      let sessionsData = [];\n      \n      if (sessionsResponse.ok) {\n        sessionsData = await sessionsResponse.json();\n      }\n\n      // Fetch metrics to get agent performance data\n      const metricsResponse = await fetch('/api/metrics');\n      let metricsData = null;\n      \n      if (metricsResponse.ok) {\n        metricsData = await metricsResponse.json();\n      }\n\n      // Process empire agents data into UI format\n      const processedAgents: Agent[] = agentsData.map((agent: any, index: number) => ({\n        id: agent.id || `agent_${index}`,\n        name: agent.name || `Agent ${index + 1}`,\n        type: agent.type || 'General Purpose',\n        status: agent.status === 'active' ? 'active' : agent.status === 'error' ? 'error' : 'idle',\n        health: agent.health || Math.floor(85 + Math.random() * 15), // Would come from real health checks\n        lastActivity: agent.lastActivity || new Date().toISOString(),\n        totalTasks: agent.totalTasks || Math.floor(Math.random() * 100),\n        completedTasks: agent.completedTasks || Math.floor(Math.random() * 80),\n        errorCount: agent.errorCount || Math.floor(Math.random() * 5),\n        performance: {\n          avgResponseTime: agent.performance?.avgResponseTime || Math.floor(50 + Math.random() * 200),\n          successRate: agent.performance?.successRate || (90 + Math.random() * 10),\n          throughput: agent.performance?.throughput || Math.floor(10 + Math.random() * 50)\n        },\n        capabilities: agent.capabilities || ['Task Processing', 'Data Analysis', 'Communication']\n      }));\n\n      // Add system-level agents based on metrics\n      if (metricsData?.active_sessions > 0) {\n        processedAgents.push({\n          id: 'system_orchestrator',\n          name: 'System Orchestrator',\n          type: 'Core System',\n          status: 'active',\n          health: metricsData.ok ? 95 : 60,\n          lastActivity: new Date().toISOString(),\n          totalTasks: metricsData.total_requests || 0,\n          completedTasks: Math.floor((metricsData.total_requests || 0) * 0.95),\n          errorCount: metricsData.total_errors || 0,\n          performance: {\n            avgResponseTime: 120,\n            successRate: (((metricsData.total_requests || 0) - (metricsData.total_errors || 0)) / Math.max(metricsData.total_requests || 1, 1)) * 100,\n            throughput: metricsData.active_sessions || 0\n          },\n          capabilities: ['Request Orchestration', 'Session Management', 'Error Handling']\n        });\n      }\n\n      setAgents(processedAgents);\n      setSessions(sessionsData);\n      \n    } catch (err) {\n      console.error('Failed to fetch agent data:', err);\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Agent management actions\n  const createAgentSession = async () => {\n    try {\n      const response = await fetch('/api/agents/session', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (response.ok) {\n        const newSession = await response.json();\n        console.log('New agent session created:', newSession.session_id);\n        fetchAgentData(); // Refresh data\n      }\n    } catch (err) {\n      console.error('Failed to create agent session:', err);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-400';\n      case 'idle': return 'text-yellow-400';\n      case 'error': return 'text-red-400';\n      case 'stopped': return 'text-gray-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active': return Play;\n      case 'idle': return Pause;\n      case 'error': return AlertCircle;\n      case 'stopped': return Square;\n      default: return Clock;\n    }\n  };\n\n  const formatLastActivity = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    \n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffMins < 1440) return `${Math.floor(diffMins / 60)}h ago`;\n    return `${Math.floor(diffMins / 1440)}d ago`;\n  };\n\n  useEffect(() => {\n    fetchAgentData();\n    \n    // Set up real-time updates\n    const interval = setInterval(fetchAgentData, 15000); // Refresh every 15 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-black text-white p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 text-cyan-400 animate-spin mx-auto mb-4\" />\n          <p className=\"text-lg text-cyan-400\">Loading Agent Management System...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-black text-white p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-8 h-8 text-red-400 mx-auto mb-4\" />\n          <p className=\"text-lg text-red-400 mb-4\">Failed to load agent data</p>\n          <p className=\"text-gray-400 mb-4\">{error}</p>\n          <button\n            onClick={fetchAgentData}\n            className=\"px-4 py-2 bg-cyan-600/20 border border-cyan-500/30 text-cyan-300 rounded-lg hover:bg-cyan-600/30\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-6\">\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-8\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Agent Management\n            </h1>\n            <p className=\"text-lg text-gray-400\">Deploy, monitor, and optimize AI agents across your empire</p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2 px-4 py-2 bg-gray-900/40 rounded-lg border border-gray-700/30\">\n              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'} animate-pulse`} />\n              <span className=\"text-sm font-mono\">\n                {agents.filter(a => a.status === 'active').length} Active\n              </span>\n            </div>\n            \n            <button\n              onClick={createAgentSession}\n              className=\"px-4 py-2 bg-purple-600/20 border border-purple-500/30 text-purple-300 rounded-lg hover:bg-purple-600/30 flex items-center gap-2\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Session\n            </button>\n            \n            <button\n              onClick={fetchAgentData}\n              disabled={loading}\n              className=\"p-2 text-gray-400 hover:text-cyan-400 rounded-lg hover:bg-gray-800/60 disabled:opacity-50\"\n            >\n              <RefreshCw className={`w-5 h-5 ${loading ? 'animate-spin' : ''}`} />\n            </button>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Agents Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        {agents.map((agent, index) => {\n          const StatusIcon = getStatusIcon(agent.status);\n          \n          return (\n            <motion.div\n              key={agent.id}\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: index * 0.1 }}\n              onClick={() => setSelectedAgent(selectedAgent === agent.id ? null : agent.id)}\n              className=\"bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30 hover:border-purple-400/30 transition-colors cursor-pointer\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"relative p-3 rounded-lg bg-black/40\">\n                    <Users className=\"w-6 h-6 text-purple-400\" />\n                    <StatusIcon className={`w-3 h-3 absolute -top-1 -right-1 ${getStatusColor(agent.status)}`} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-white\">{agent.name}</h3>\n                    <p className=\"text-sm text-gray-400\">{agent.type}</p>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <div className={`text-sm font-mono ${getStatusColor(agent.status)} uppercase`}>\n                    {agent.status}\n                  </div>\n                  <div className=\"text-xs text-gray-400\">\n                    Health: {agent.health}%\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Tasks Completed:</span>\n                  <span className=\"text-green-400 font-mono\">{agent.completedTasks}/{agent.totalTasks}</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Success Rate:</span>\n                  <span className=\"text-cyan-400 font-mono\">{agent.performance.successRate.toFixed(1)}%</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Last Activity:</span>\n                  <span className=\"text-white font-mono\">{formatLastActivity(agent.lastActivity)}</span>\n                </div>\n              </div>\n\n              {/* Expanded Details */}\n              {selectedAgent === agent.id && (\n                <motion.div\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                  exit={{ opacity: 0, height: 0 }}\n                  className=\"mt-4 pt-4 border-t border-gray-700/50\"\n                >\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h4 className=\"text-sm font-semibold text-white mb-2\">Performance Metrics</h4>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div className=\"bg-black/40 p-2 rounded\">\n                          <div className=\"text-gray-400\">Avg Response</div>\n                          <div className=\"text-white font-mono\">{agent.performance.avgResponseTime}ms</div>\n                        </div>\n                        <div className=\"bg-black/40 p-2 rounded\">\n                          <div className=\"text-gray-400\">Throughput</div>\n                          <div className=\"text-white font-mono\">{agent.performance.throughput}/min</div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"text-sm font-semibold text-white mb-2\">Capabilities</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {agent.capabilities.map((capability, idx) => (\n                          <span\n                            key={idx}\n                            className=\"px-2 py-1 text-xs bg-purple-500/20 text-purple-300 rounded-full\"\n                          >\n                            {capability}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Active Sessions */}\n      {sessions.length > 0 && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30\"\n        >\n          <h2 className=\"text-xl font-bold text-purple-400 mb-6 flex items-center\">\n            <MessageSquare className=\"w-5 h-5 mr-2\" />\n            Active Agent Sessions\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {sessions.map((session, index) => (\n              <div\n                key={session.id}\n                className=\"p-4 bg-black/40 rounded-lg border border-gray-700/50\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"font-mono text-sm text-white\">Session {session.id.slice(-8)}</span>\n                  <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                </div>\n                <div className=\"text-xs text-gray-400\">\n                  Status: <span className=\"text-green-400\">{session.status}</span>\n                </div>\n                <div className=\"text-xs text-gray-400\">\n                  Created: {new Date(session.created_at).toLocaleString()}\n                </div>\n              </div>\n            ))}\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n}"],"names":["Plus","createLucideIcon","Square","AgentsModule","agents","setAgents","useState","sessions","setSessions","loading","setLoading","error","setError","selectedAgent","setSelectedAgent","isConnected","useEmpireStore","fetchAgentData","agentsResponse","agentsData","sessionsResponse","sessionsData","metricsResponse","metricsData","processedAgents","agent","index","_a","_b","_c","err","createAgentSession","response","newSession","getStatusColor","status","getStatusIcon","Play","Pause","AlertCircle","Clock","formatLastActivity","timestamp","date","diffMs","diffMins","useEffect","interval","jsxs","jsx","RefreshCw","motion","a","StatusIcon","Users","capability","idx","MessageSquare","session","CheckCircle"],"mappings":"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","x_google_ignoreList":[0,1]}