/**
 * Enterprise Analytics & Business Intelligence Module
 * 
 * Advanced enterprise-grade analytics with predictive insights,
 * AI-powered forecasting, and comprehensive business intelligence.
 */

import React, { useState, useEffect } from 'react';
import { Card } from '../../components/ui/Card';
import { Button } from '../../components/ui/Button';
import { Badge } from '../../components/ui/Badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../components/ui/Tabs';
import { 
  BarChart3, 
  TrendingUp, 
  PieChart, 
  Calendar, 
  Filter,
  Download,
  Zap,
  Brain,
  Target,
  DollarSign,
  ShoppingCart,
  Users,
  Package,
  ArrowUp,
  ArrowDown,
  Minus,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  Eye,
  Database,
  TrendingDown
} from 'lucide-react';
import { apiClient } from '../../services/api-client';

interface EnterpriseAnalytics {
  revenue: RevenueAnalytics;
  customers: CustomerAnalytics;
  products: ProductAnalytics;
  operations: OperationalAnalytics;
  forecasts: PredictiveAnalytics;
  kpis: EnterpriseKPI[];
}

interface RevenueAnalytics {
  totalRevenue: number;
  revenueGrowth: number;
  recurringRevenue: number;
  averageOrderValue: number;
  conversionRate: number;
  revenueByChannel: ChannelRevenue[];
  revenueByRegion: RegionRevenue[];
  monthlyTrend: TrendPoint[];
  profitability: ProfitabilityMetrics;
}

interface CustomerAnalytics {
  totalCustomers: number;
  newCustomers: number;
  customerGrowth: number;
  lifetimeValue: number;
  churnRate: number;
  satisfactionScore: number;
  segmentDistribution: CustomerSegment[];
  acquisitionChannels: AcquisitionChannel[];
  retentionMetrics: RetentionMetrics;
}

interface ProductAnalytics {
  totalProducts: number;
  bestSellers: ProductPerformance[];
  categoryPerformance: CategoryMetrics[];
  inventoryTurnover: number;
  profitMargins: ProfitMargin[];
  seasonalTrends: SeasonalTrend[];
  priceOptimization: PriceOptimization[];
}

interface OperationalAnalytics {
  orderFulfillmentTime: number;
  inventoryAccuracy: number;
  supplierPerformance: number;
  returnRate: number;
  operationalEfficiency: number;
  automationLevel: number;
  processMetrics: ProcessMetric[];
  resourceUtilization: ResourceMetrics;
}

interface PredictiveAnalytics {
  revenueForecast: ForecastPoint[];
  demandForecast: DemandForecast[];
  seasonalPredictions: SeasonalPrediction[];
  marketTrends: MarketTrend[];
  riskAssessments: RiskAssessment[];
  aiInsights: AIInsight[];
}

interface EnterpriseKPI {
  id: string;
  name: string;
  value: number;
  target: number;
  unit: string;
  trend: 'up' | 'down' | 'stable';
  trendValue: number;
  status: 'excellent' | 'good' | 'warning' | 'critical';
  description: string;
  category: 'revenue' | 'operations' | 'customer' | 'product';
}

export default function AnalyticsModule() {
  const [analytics, setAnalytics] = useState<EnterpriseAnalytics | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('executive');
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [refreshing, setRefreshing] = useState(false);
  const [aiMode, setAiMode] = useState(false);
  const [realTimeEnabled, setRealTimeEnabled] = useState(true);

  useEffect(() => {
    fetchAnalyticsData();
    
    if (realTimeEnabled) {
      const interval = setInterval(fetchAnalyticsData, 30000); // 30s updates
      return () => clearInterval(interval);
    }
  }, [realTimeEnabled, dateRange, aiMode]);

  const fetchAnalyticsData = async () => {
    try {
      setLoading(true);
      const response = await apiClient.get('/api/analytics/enterprise', {
        params: {
          startDate: dateRange.start,
          endDate: dateRange.end,
          includeAI: aiMode,
          realTime: realTimeEnabled
        }
      });
      setAnalytics(response.data);
    } catch (error) {
      console.error('Failed to fetch enterprise analytics:', error);
    } finally {
      setLoading(false);
    }
  };

  const refreshData = async () => {
    setRefreshing(true);
    await fetchAnalyticsData();
    setRefreshing(false);
  };

  const exportReport = async (format: 'pdf' | 'excel' | 'powerpoint') => {
    try {
      const response = await apiClient.post('/api/analytics/export-enterprise', {
        format,
        dateRange,
        includeAI: aiMode,
        sections: ['executive', 'revenue', 'customers', 'products', 'operations', 'forecasts']
      });
      
      // Download the generated report
      const blob = new Blob([response.data], { 
        type: format === 'pdf' ? 'application/pdf' : 
              format === 'excel' ? 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' : 
              'application/vnd.openxmlformats-officedocument.presentationml.presentation'
      });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `enterprise-analytics-${new Date().toISOString().split('T')[0]}.${
        format === 'excel' ? 'xlsx' : format === 'powerpoint' ? 'pptx' : 'pdf'
      }`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to export analytics report:', error);
    }
  };

  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {
    switch (trend) {
      case 'up': return <ArrowUp className="w-4 h-4 text-green-400" />;
      case 'down': return <ArrowDown className="w-4 h-4 text-red-400" />;
      default: return <Minus className="w-4 h-4 text-gray-400" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'excellent': return 'text-green-400';
      case 'good': return 'text-cyan-400';
      case 'warning': return 'text-yellow-400';
      case 'critical': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <RefreshCw className="w-8 h-8 animate-spin text-cyan-400" />
      </div>
    );
  }

  if (!analytics) {
    return (
      <div className="flex items-center justify-center h-64 text-red-400">
        <AlertTriangle className="w-6 h-6 mr-2" />
        Failed to load enterprise analytics
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <BarChart3 className="w-8 h-8 text-cyan-400" />
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
                Enterprise Analytics
              </h1>
              <p className="text-gray-400 mt-1">
                Advanced business intelligence and predictive insights
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <Brain className="w-4 h-4 text-purple-400" />
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={aiMode}
                  onChange={(e) => setAiMode(e.target.checked)}
                  className="w-4 h-4"
                />
                <span className="text-sm">AI Insights</span>
              </label>
            </div>
            
            <div className="flex items-center space-x-2">
              <Eye className="w-4 h-4 text-cyan-400" />
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={realTimeEnabled}
                  onChange={(e) => setRealTimeEnabled(e.target.checked)}
                  className="w-4 h-4"
                />
                <span className="text-sm">Real-time</span>
              </label>
            </div>
            
            <Button 
              onClick={refreshData}
              disabled={refreshing}
              variant="outline"
              className="flex items-center space-x-2"
            >
              <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </Button>
            
            <Button 
              onClick={() => exportReport('powerpoint')}
              className="bg-cyan-600 hover:bg-cyan-700 flex items-center space-x-2"
            >
              <Download className="w-4 h-4" />
              <span>Export</span>
            </Button>
          </div>
        </div>

        {/* Executive KPI Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {analytics.kpis.slice(0, 8).map((kpi) => (
            <Card key={kpi.id} className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-2">
                  <div className={`w-2 h-2 rounded-full ${getStatusColor(kpi.status).replace('text-', 'bg-')}`} />
                  <h3 className="text-sm font-medium text-gray-400">{kpi.name}</h3>
                </div>
                <div className="flex items-center space-x-1">
                  {getTrendIcon(kpi.trend)}
                  <span className={`text-sm ${kpi.trend === 'up' ? 'text-green-400' : kpi.trend === 'down' ? 'text-red-400' : 'text-gray-400'}`}>
                    {Math.abs(kpi.trendValue).toFixed(1)}%
                  </span>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex items-baseline justify-between">
                  <span className={`text-3xl font-bold ${getStatusColor(kpi.status)}`}>
                    {kpi.value.toLocaleString()}{kpi.unit}
                  </span>
                  <Badge variant={
                    kpi.status === 'excellent' ? 'default' :
                    kpi.status === 'good' ? 'default' :
                    kpi.status === 'warning' ? 'secondary' : 'destructive'
                  }>
                    {kpi.status}
                  </Badge>
                </div>
                
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all duration-300 ${
                      kpi.status === 'excellent' ? 'bg-green-400' :
                      kpi.status === 'good' ? 'bg-cyan-400' :
                      kpi.status === 'warning' ? 'bg-yellow-400' : 'bg-red-400'
                    }`}
                    style={{ width: `${Math.min((kpi.value / kpi.target) * 100, 100)}%` }}
                  />
                </div>
                
                <div className="flex items-center justify-between text-xs">
                  <span className="text-gray-400">Target: {kpi.target.toLocaleString()}{kpi.unit}</span>
                  <span className={`${kpi.value >= kpi.target ? 'text-green-400' : 'text-yellow-400'}`}>
                    {((kpi.value / kpi.target) * 100).toFixed(0)}%
                  </span>
                </div>
              </div>
            </Card>
          ))}
        </div>

        {/* Analytics Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-6 mb-8">
            <TabsTrigger value="executive">Executive</TabsTrigger>
            <TabsTrigger value="revenue">Revenue</TabsTrigger>
            <TabsTrigger value="customers">Customers</TabsTrigger>
            <TabsTrigger value="products">Products</TabsTrigger>
            <TabsTrigger value="operations">Operations</TabsTrigger>
            <TabsTrigger value="ai-insights">AI Insights</TabsTrigger>
          </TabsList>

          {/* Executive Dashboard */}
          <TabsContent value="executive">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Revenue Summary */}
              <Card className="p-6">
                <h3 className="text-xl font-semibold mb-4 flex items-center">
                  <DollarSign className="w-5 h-5 mr-2 text-green-400" />
                  Revenue Performance
                </h3>
                
                <div className="space-y-6">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="bg-gray-800 p-4 rounded-lg">
                      <div className="text-sm text-gray-400 mb-1">Total Revenue</div>
                      <div className="text-2xl font-bold text-green-400">
                        ${analytics.revenue.totalRevenue.toLocaleString()}
                      </div>
                      <div className="flex items-center space-x-1 mt-1">
                        {getTrendIcon(analytics.revenue.revenueGrowth > 0 ? 'up' : 'down')}
                        <span className={`text-sm ${analytics.revenue.revenueGrowth > 0 ? 'text-green-400' : 'text-red-400'}`}>
                          {analytics.revenue.revenueGrowth.toFixed(1)}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="bg-gray-800 p-4 rounded-lg">
                      <div className="text-sm text-gray-400 mb-1">Monthly Recurring</div>
                      <div className="text-2xl font-bold text-cyan-400">
                        ${(analytics.revenue.recurringRevenue / 12).toLocaleString()}
                      </div>
                      <div className="text-sm text-gray-400 mt-1">
                        {((analytics.revenue.recurringRevenue / analytics.revenue.totalRevenue) * 100).toFixed(1)}% of total
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span>Average Order Value</span>
                      <span className="font-semibold">${analytics.revenue.averageOrderValue.toFixed(2)}</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span>Conversion Rate</span>
                      <span className="font-semibold">{analytics.revenue.conversionRate.toFixed(2)}%</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span>Gross Margin</span>
                      <span className="font-semibold text-green-400">
                        {analytics.revenue.profitability?.grossMargin?.toFixed(1) || 'N/A'}%
                      </span>
                    </div>
                  </div>
                </div>
              </Card>

              {/* Customer Metrics */}
              <Card className="p-6">
                <h3 className="text-xl font-semibold mb-4 flex items-center">
                  <Users className="w-5 h-5 mr-2 text-cyan-400" />
                  Customer Intelligence
                </h3>
                
                <div className="space-y-6">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="bg-gray-800 p-4 rounded-lg">
                      <div className="text-sm text-gray-400 mb-1">Total Customers</div>
                      <div className="text-2xl font-bold text-cyan-400">
                        {analytics.customers.totalCustomers.toLocaleString()}
                      </div>
                      <div className="flex items-center space-x-1 mt-1">
                        {getTrendIcon(analytics.customers.customerGrowth > 0 ? 'up' : 'down')}
                        <span className={`text-sm ${analytics.customers.customerGrowth > 0 ? 'text-green-400' : 'text-red-400'}`}>
                          {analytics.customers.customerGrowth.toFixed(1)}%
                        </span>
                      </div>
                    </div>
                    
                    <div className="bg-gray-800 p-4 rounded-lg">
                      <div className="text-sm text-gray-400 mb-1">Lifetime Value</div>
                      <div className="text-2xl font-bold text-purple-400">
                        ${analytics.customers.lifetimeValue.toFixed(0)}
                      </div>
                      <div className="text-sm text-gray-400 mt-1">
                        per customer
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span>New Customers</span>
                      <span className="font-semibold">{analytics.customers.newCustomers.toLocaleString()}</span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span>Churn Rate</span>
                      <span className={`font-semibold ${analytics.customers.churnRate < 5 ? 'text-green-400' : 'text-red-400'}`}>
                        {analytics.customers.churnRate.toFixed(2)}%
                      </span>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <span>Satisfaction Score</span>
                      <div className="flex items-center space-x-2">
                        <span className="font-semibold">{analytics.customers.satisfactionScore.toFixed(1)}/10</span>
                        <div className="w-16 bg-gray-700 rounded-full h-2">
                          <div 
                            className="bg-yellow-400 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${(analytics.customers.satisfactionScore / 10) * 100}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>

              {/* Operational Excellence */}
              <Card className="p-6">
                <h3 className="text-xl font-semibold mb-4 flex items-center">
                  <Target className="w-5 h-5 mr-2 text-purple-400" />
                  Operational Excellence
                </h3>
                
                <div className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span>Order Fulfillment</span>
                      <span className="font-semibold">{analytics.operations.orderFulfillmentTime}h avg</span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-cyan-400 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${Math.max(0, (48 - analytics.operations.orderFulfillmentTime) / 48 * 100)}%` }}
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span>Inventory Accuracy</span>
                      <span className="font-semibold">{analytics.operations.inventoryAccuracy.toFixed(1)}%</span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-green-400 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${analytics.operations.inventoryAccuracy}%` }}
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span>Automation Level</span>
                      <span className="font-semibold">{analytics.operations.automationLevel.toFixed(1)}%</span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-purple-400 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${analytics.operations.automationLevel}%` }}
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span>Overall Efficiency</span>
                      <span className="font-semibold">{analytics.operations.operationalEfficiency.toFixed(1)}%</span>
                    </div>
                    <div className="w-full bg-gray-700 rounded-full h-2">
                      <div 
                        className="bg-yellow-400 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${analytics.operations.operationalEfficiency}%` }}
                      />
                    </div>
                  </div>
                </div>
              </Card>

              {/* Product Performance */}
              <Card className="p-6">
                <h3 className="text-xl font-semibold mb-4 flex items-center">
                  <Package className="w-5 h-5 mr-2 text-yellow-400" />
                  Product Intelligence
                </h3>
                
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="bg-gray-800 p-3 rounded-lg">
                      <div className="text-xs text-gray-400 mb-1">Active Products</div>
                      <div className="text-lg font-bold">{analytics.products.totalProducts.toLocaleString()}</div>
                    </div>
                    
                    <div className="bg-gray-800 p-3 rounded-lg">
                      <div className="text-xs text-gray-400 mb-1">Inventory Turns</div>
                      <div className="text-lg font-bold">{analytics.products.inventoryTurnover.toFixed(1)}x</div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="text-sm font-semibold mb-2">Top Performers</div>
                    <div className="space-y-2">
                      {analytics.products.bestSellers.slice(0, 3).map((product, index) => (
                        <div key={product.id} className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <Badge variant="outline">#{index + 1}</Badge>
                            <span className="text-sm truncate">{product.name}</span>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-semibold text-green-400">
                              ${product.revenue.toLocaleString()}
                            </div>
                            <div className="text-xs text-gray-400">
                              {product.units} units
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          {/* AI Insights */}
          <TabsContent value="ai-insights">
            {aiMode ? (
              <div className="space-y-6">
                <div className="bg-gradient-to-r from-purple-900/50 to-blue-900/50 border border-purple-400/30 rounded-lg p-6">
                  <div className="flex items-center space-x-3 mb-4">
                    <Brain className="w-6 h-6 text-purple-400" />
                    <h3 className="text-xl font-semibold text-purple-400">AI-Powered Insights</h3>
                  </div>
                  <p className="text-gray-300 mb-4">
                    Our advanced machine learning algorithms analyze patterns across all business metrics to provide actionable insights and predictions.
                  </p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {analytics.forecasts.aiInsights?.slice(0, 6).map((insight, index) => (
                      <Card key={index} className="p-4 bg-gray-800/50 border-purple-400/20">
                        <div className="flex items-start space-x-3">
                          <div className={`w-2 h-2 rounded-full mt-2 ${
                            insight.priority === 'high' ? 'bg-red-400' :
                            insight.priority === 'medium' ? 'bg-yellow-400' : 'bg-green-400'
                          }`} />
                          <div>
                            <h4 className="font-semibold mb-2">{insight.title}</h4>
                            <p className="text-sm text-gray-300 mb-3">{insight.description}</p>
                            <div className="flex items-center justify-between">
                              <Badge variant="outline" className="text-xs">
                                {insight.confidence}% confident
                              </Badge>
                              <span className="text-xs text-gray-400">{insight.category}</span>
                            </div>
                          </div>
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>

                {/* Predictive Charts would go here */}
                <Card className="p-6">
                  <h3 className="text-xl font-semibold mb-4 flex items-center">
                    <TrendingUp className="w-5 h-5 mr-2 text-cyan-400" />
                    Revenue Forecast (Next 6 Months)
                  </h3>
                  <div className="h-64 bg-gray-800 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <BarChart3 className="w-12 h-12 mx-auto mb-2 text-gray-600" />
                      <p className="text-gray-400">AI-powered revenue forecast chart</p>
                      <p className="text-sm text-gray-500">Integration with ML prediction models</p>
                    </div>
                  </div>
                </Card>
              </div>
            ) : (
              <Card className="p-8 text-center">
                <Brain className="w-16 h-16 mx-auto mb-4 text-gray-600" />
                <h3 className="text-xl font-semibold mb-2">AI Insights Disabled</h3>
                <p className="text-gray-400 mb-4">
                  Enable AI mode to access advanced machine learning insights and predictions.
                </p>
                <Button 
                  onClick={() => setAiMode(true)}
                  className="bg-purple-600 hover:bg-purple-700"
                >
                  Enable AI Insights
                </Button>
              </Card>
            )}
          </TabsContent>

          {/* Other tabs would continue with similar patterns... */}
        </Tabs>
      </div>
    </div>
  );
}

// Additional interfaces for completeness
interface ChannelRevenue {
  channel: string;
  revenue: number;
  percentage: number;
  growth: number;
}

interface RegionRevenue {
  region: string;
  revenue: number;
  percentage: number;
  growth: number;
}

interface TrendPoint {
  date: string;
  value: number;
  forecast?: boolean;
}

interface ProfitabilityMetrics {
  grossMargin: number;
  netMargin: number;
  ebitda: number;
}

interface CustomerSegment {
  segment: string;
  count: number;
  percentage: number;
  revenue: number;
}

interface AcquisitionChannel {
  channel: string;
  customers: number;
  cost: number;
  ltv: number;
  roi: number;
}

interface RetentionMetrics {
  monthlyRetention: number;
  yearlyRetention: number;
  cohortAnalysis: any[];
}

interface ProductPerformance {
  id: string;
  name: string;
  revenue: number;
  units: number;
  growth: number;
  margin: number;
}

interface CategoryMetrics {
  category: string;
  revenue: number;
  growth: number;
  margin: number;
  units: number;
}

interface ProfitMargin {
  product: string;
  margin: number;
  trend: 'up' | 'down' | 'stable';
}

interface SeasonalTrend {
  period: string;
  demand: number;
  variance: number;
}

interface PriceOptimization {
  product: string;
  currentPrice: number;
  optimizedPrice: number;
  expectedLift: number;
}

interface ProcessMetric {
  process: string;
  efficiency: number;
  automation: number;
  bottlenecks: string[];
}

interface ResourceMetrics {
  cpuUtilization: number;
  memoryUtilization: number;
  storageUtilization: number;
}

interface ForecastPoint {
  date: string;
  predicted: number;
  confidence: number;
  factors: string[];
}

interface DemandForecast {
  product: string;
  demand: number;
  confidence: number;
  seasonality: number;
}

interface SeasonalPrediction {
  season: string;
  impact: number;
  confidence: number;
  recommendations: string[];
}

interface MarketTrend {
  trend: string;
  impact: 'positive' | 'negative' | 'neutral';
  probability: number;
  timeframe: string;
}

interface RiskAssessment {
  risk: string;
  probability: number;
  impact: number;
  mitigation: string[];
}

interface AIInsight {
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  confidence: number;
  category: string;
  recommendations: string[];
}

interface AnalyticsDashboard {
  summary: {
    total_orders: number;
    total_customers: number;
    inventory_items: number;
    active_campaigns: number;
  };
  alerts: Alert[];
  time_range: string;
  last_updated: string;
}

interface AnalyticsInsight {
  id: string;
  title: string;
  value: string | number;
  change: number;
  trend: 'up' | 'down' | 'neutral';
  category: 'performance' | 'business' | 'operations' | 'security';
}

export default function AnalyticsModule() {
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);
  const [insights, setInsights] = useState<AnalyticsInsight[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [timeRange, setTimeRange] = useState('30d');
  const [autoRefresh, setAutoRefresh] = useState(true);
  const { isConnected } = useEmpireStore();

  // Fetch analytics data from API
  const fetchAnalytics = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch main analytics data
      const response = await fetch('/api/analytics/dashboard');
      if (!response.ok) {
        throw new Error(`Analytics API error: ${response.status}`);
      }

      const data = await response.json();
      
      // Process and format the data
      const formattedData: AnalyticsData = {
        kpis: data.kpis || {
          monthly_revenue: { value: 0, change: 0, status: 'healthy', formatted: '$0' },
          conversion_rate: { value: 0, change: 0, status: 'healthy', formatted: '0%' },
          avg_order_value: { value: 0, change: 0, status: 'healthy', formatted: '$0' },
          customer_acquisition_cost: { value: 0, change: 0, status: 'healthy', formatted: '$0' }
        },
        charts: data.charts || {
          revenue_trend: { type: 'line', data: [], title: 'Revenue Trend' },
          conversion_funnel: { type: 'funnel', data: [], title: 'Conversion Funnel' },
          top_products: { type: 'bar', data: [], title: 'Top Products' },
          customer_segments: { type: 'pie', data: [], title: 'Customer Segments' }
        },
        summary: data.summary || {
          total_orders: 0,
          total_customers: 0,
          inventory_items: 0,
          active_campaigns: 0
        },
        alerts: data.alerts || [],
        time_range: data.time_range || '30d',
        last_updated: data.last_updated || new Date().toISOString()
      };

      setAnalyticsData(formattedData);
      
      // Set up insights from the processed data
      if (data.insights) {
        setInsights(data.insights.map((insight: any) => ({
          id: insight.id || Math.random().toString(),
          title: insight.title,
          value: insight.value,
          change: insight.change || 0,
          trend: insight.trend || 'neutral',
          category: insight.category || 'general'
        })));
      }

    } catch (err) {
      console.error('Failed to fetch analytics:', err);
      setError(err instanceof Error ? err.message : 'Failed to load analytics data');
    } finally {
      setLoading(false);
    }
  };

  // Create an alias for the main fetch function
    const fetchAnalyticsData = async () => {
    // Fetch real analytics data from empire service
    try {
      const response = await empireService.fetchAnalytics();
      return response;
    } catch (error) {
      console.error('Failed to fetch analytics:', error);
      return null;
    }
  };

  // Real-time data updates via polling (removed socket dependency)
  useEffect(() => {
    // Periodic data refresh instead of WebSocket
    const refreshData = async () => {
      try {
        await fetchAnalyticsData();
      } catch (error) {
        console.error('Failed to refresh analytics data:', error);
      }
    };
    
    const interval = setInterval(refreshData, 30000); // Refresh every 30 seconds
    return () => clearInterval(interval);
  }, []);

  // Auto-refresh mechanism
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (autoRefresh) {
      interval = setInterval(() => {
        loadAnalyticsData(false); // Refresh without showing loading
      }, 60000); // Every minute
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [autoRefresh, timeRange]);

  // Initial data load
  useEffect(() => {
    loadAnalyticsData();
  }, [timeRange]);

  const loadAnalyticsData = async (showLoading = true) => {
    try {
      if (showLoading) setLoading(true);
      setError(null);

      const response = await fetch(
        `/api/analytics/dashboard?time_range=${timeRange}&refresh=true`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );

      if (!response.ok) {
        throw new Error(`Analytics API error: ${response.status}`);
      }

      const data = await response.json();
      setAnalyticsData(data);
    } catch (err) {
      console.error('Failed to load analytics data:', err);
      setError(err instanceof Error ? err.message : 'Failed to load analytics data');
    } finally {
      setLoading(false);
    }
  };

  const generateReport = async (reportType: string) => {
    try {
      const response = await fetch(`/api/analytics/reports/${reportType}/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ format: 'pdf' })
      });

      if (response.ok) {
        const reportData = await response.json();
        console.log('Report generated:', reportData);
        // Handle report download
      }
    } catch (err) {
      console.error('Failed to generate report:', err);
    }
  };

  const renderKPICard = (title: string, icon: React.ReactNode, metric: Metric) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-surface/50 rounded-lg p-6 border border-accent-cyan/20"
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          {icon}
          <span className="text-sm text-text-dim">{title}</span>
        </div>
        <span className={`px-2 py-1 text-xs rounded ${
          metric.status === 'healthy' ? 'bg-accent-green/20 text-accent-green' :
          metric.status === 'warning' ? 'bg-yellow-500/20 text-yellow-500' :
          'bg-red-500/20 text-red-500'
        }`}>
          {metric.status}
        </span>
      </div>
      
      <div className="mt-2">
        <div className="text-2xl font-bold text-text-primary">
          {metric.formatted}
        </div>
        <div className="flex items-center mt-1">
          {metric.change >= 0 ? (
            <TrendingUp className="w-4 h-4 text-accent-green mr-1" />
          ) : (
            <TrendingDown className="w-4 h-4 text-accent-magenta mr-1" />
          )}
          <span className={`text-sm ${metric.change >= 0 ? 'text-accent-green' : 'text-accent-magenta'}`}>
            {metric.change >= 0 ? '+' : ''}{metric.change}%
          </span>
        </div>
      </div>
    </motion.div>
  );

  const renderChart = (chartData: ChartData) => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-surface/50 rounded-lg p-6 border border-accent-cyan/20"
    >
      <div className="flex items-center mb-4">
        <BarChart3 className="w-5 h-5 mr-2 text-accent-cyan" />
        <h3 className="text-text-primary font-semibold">{chartData.title}</h3>
      </div>
      <div className="h-64 bg-bg-alt rounded flex items-center justify-center">
        <div className="text-text-dim">
          {chartData.type} Chart - {chartData.data.length} data points
        </div>
      </div>
    </motion.div>
  );

  const renderAlert = (alert: Alert) => (
    <motion.div
      key={alert.id}
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      className={`p-3 rounded border-l-4 ${
        alert.type === 'error' ? 'border-red-500 bg-red-500/10' :
        alert.type === 'warning' ? 'border-yellow-500 bg-yellow-500/10' :
        'border-blue-500 bg-blue-500/10'
      }`}
    >
      <div className="flex items-start justify-between">
        <div className="flex items-start space-x-2">
          <AlertTriangle className={`w-4 h-4 mt-0.5 ${
            alert.type === 'error' ? 'text-red-500' :
            alert.type === 'warning' ? 'text-yellow-500' :
            'text-blue-500'
          }`} />
          <div>
            <div className="font-semibold text-text-primary">{alert.title}</div>
            <div className="text-sm text-text-dim">{alert.message}</div>
          </div>
        </div>
        <span className={`px-2 py-1 text-xs rounded ${
          alert.severity === 'high' ? 'bg-red-500/20 text-red-500' :
          alert.severity === 'medium' ? 'bg-yellow-500/20 text-yellow-500' :
          'bg-blue-500/20 text-blue-500'
        }`}>
          {alert.severity}
        </span>
      </div>
    </motion.div>
  );

  if (loading && !analyticsData) {
    return (
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <BarChart3 className="w-12 h-12 text-accent-cyan animate-pulse mx-auto mb-4" />
            <div className="text-text-primary font-semibold">Loading Analytics</div>
            <div className="text-text-dim">Gathering business intelligence...</div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
          <div className="flex items-center space-x-2 text-red-400">
            <AlertTriangle className="w-5 h-5" />
            <span className="font-semibold">Analytics Error</span>
          </div>
          <div className="mt-2 text-text-dim">{error}</div>
          <button 
            onClick={() => loadAnalyticsData()} 
            className="mt-4 px-4 py-2 bg-accent-cyan/20 text-accent-cyan rounded hover:bg-accent-cyan/30 transition-colors"
          >
            <RefreshCw className="w-4 h-4 mr-2 inline" />
            Retry
          </button>
        </div>
      </div>
    );
  }

  if (!analyticsData) return null;

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-text-primary">Analytics Dashboard</h1>
          <p className="text-text-dim">Business intelligence and performance metrics</p>
        </div>
        
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setAutoRefresh(!autoRefresh)}
            className={`px-3 py-2 rounded text-sm border transition-colors ${
              autoRefresh 
                ? 'bg-accent-green/20 border-accent-green/30 text-accent-green' 
                : 'border-accent-cyan/20 text-text-dim hover:text-text-primary'
            }`}
          >
            <Zap className="w-4 h-4 mr-1 inline" />
            Auto Refresh
          </button>
          
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="px-3 py-2 bg-surface border border-accent-cyan/20 rounded text-sm text-text-primary"
          >
            <option value="7d">Last 7 days</option>
            <option value="30d">Last 30 days</option>
            <option value="90d">Last 90 days</option>
          </select>
          
          <button
            onClick={() => loadAnalyticsData()}
            className="px-3 py-2 border border-accent-cyan/20 rounded text-sm text-text-dim hover:text-text-primary transition-colors"
          >
            <RefreshCw className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-accent-cyan/20">
        <div className="flex space-x-8">
          {[
            { id: 'dashboard', label: 'Dashboard' },
            { id: 'reports', label: 'Reports' },
            { id: 'forecasts', label: 'Forecasts' },
            { id: 'alerts', label: 'Alerts' }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                activeTab === tab.id
                  ? 'border-accent-cyan text-accent-cyan'
                  : 'border-transparent text-text-dim hover:text-text-primary'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Dashboard Tab */}
      {activeTab === 'dashboard' && (
        <div className="space-y-6">
          {/* KPI Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {renderKPICard(
              'Monthly Revenue',
              <DollarSign className="w-5 h-5 text-accent-green" />,
              analyticsData.kpis.monthly_revenue
            )}
            {renderKPICard(
              'Conversion Rate',
              <Target className="w-5 h-5 text-accent-cyan" />,
              analyticsData.kpis.conversion_rate
            )}
            {renderKPICard(
              'Avg Order Value',
              <ShoppingCart className="w-5 h-5 text-accent-magenta" />,
              analyticsData.kpis.avg_order_value
            )}
            {renderKPICard(
              'Acquisition Cost',
              <Users className="w-5 h-5 text-yellow-500" />,
              analyticsData.kpis.customer_acquisition_cost
            )}
          </div>

          {/* Summary Stats */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-surface/50 rounded-lg p-6 border border-accent-cyan/20"
          >
            <h3 className="text-text-primary font-semibold mb-4">Business Summary</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-text-primary">
                  {analyticsData.summary.total_orders.toLocaleString()}
                </div>
                <div className="text-text-dim text-sm">Total Orders</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-text-primary">
                  {analyticsData.summary.total_customers.toLocaleString()}
                </div>
                <div className="text-text-dim text-sm">Customers</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-text-primary">
                  {analyticsData.summary.inventory_items.toLocaleString()}
                </div>
                <div className="text-text-dim text-sm">Inventory Items</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-text-primary">
                  {analyticsData.summary.active_campaigns}
                </div>
                <div className="text-text-dim text-sm">Active Campaigns</div>
              </div>
            </div>
          </motion.div>

          {/* Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {renderChart(analyticsData.charts.revenue_trend)}
            {renderChart(analyticsData.charts.conversion_funnel)}
            {renderChart(analyticsData.charts.top_products)}
            {renderChart(analyticsData.charts.customer_segments)}
          </div>
        </div>
      )}

      {/* Reports Tab */}
      {activeTab === 'reports' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-surface/50 rounded-lg p-6 border border-accent-cyan/20"
        >
          <h3 className="text-text-primary font-semibold mb-4">Generate Reports</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button 
              onClick={() => generateReport('executive_dashboard')}
              className="p-4 border border-accent-cyan/20 rounded text-left hover:bg-accent-cyan/10 transition-colors"
            >
              <Download className="w-5 h-5 text-accent-cyan mb-2" />
              <div className="font-semibold text-text-primary">Executive Dashboard</div>
              <div className="text-sm text-text-dim">High-level business overview</div>
            </button>
            <button 
              onClick={() => generateReport('product_performance')}
              className="p-4 border border-accent-cyan/20 rounded text-left hover:bg-accent-cyan/10 transition-colors"
            >
              <Download className="w-5 h-5 text-accent-cyan mb-2" />
              <div className="font-semibold text-text-primary">Product Performance</div>
              <div className="text-sm text-text-dim">Product sales analysis</div>
            </button>
            <button 
              onClick={() => generateReport('customer_analysis')}
              className="p-4 border border-accent-cyan/20 rounded text-left hover:bg-accent-cyan/10 transition-colors"
            >
              <Download className="w-5 h-5 text-accent-cyan mb-2" />
              <div className="font-semibold text-text-primary">Customer Analysis</div>
              <div className="text-sm text-text-dim">Customer behavior insights</div>
            </button>
          </div>
        </motion.div>
      )}

      {/* Forecasts Tab */}
      {activeTab === 'forecasts' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-surface/50 rounded-lg p-6 border border-accent-cyan/20"
        >
          <h3 className="text-text-primary font-semibold mb-4">ML Forecasts</h3>
          <div className="text-center py-8">
            <TrendingUp className="w-12 h-12 text-accent-cyan mx-auto mb-4" />
            <div className="text-text-primary font-semibold">Revenue Forecasting</div>
            <div className="text-text-dim">ML-powered business forecasts</div>
            <button className="mt-4 px-4 py-2 bg-accent-cyan/20 text-accent-cyan rounded hover:bg-accent-cyan/30 transition-colors">
              Generate Forecast
            </button>
          </div>
        </motion.div>
      )}

      {/* Alerts Tab */}
      {activeTab === 'alerts' && (
        <div className="space-y-4">
          {analyticsData.alerts.length === 0 ? (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-surface/50 rounded-lg p-8 border border-accent-cyan/20 text-center"
            >
              <AlertCircle className="w-12 h-12 text-accent-green mx-auto mb-4" />
              <div className="text-text-primary font-semibold">No Active Alerts</div>
              <div className="text-text-dim">All metrics are within normal ranges</div>
            </motion.div>
          ) : (
            <div className="space-y-3">
              {analyticsData.alerts.map(renderAlert)}
            </div>
          )}
        </div>
      )}

      {/* Footer */}
      <div className="text-center text-sm text-text-dim">
        Last updated: {new Date(analyticsData.last_updated).toLocaleString()}
      </div>
    </div>
  );

  // Helper function to calculate growth rates (would use historical data in real implementation)
  const calculateGrowthRate = (currentValue: number, type: string): number => {
    // In real implementation, this would compare against historical data
    // For now, calculate based on reasonable growth patterns
    const baseGrowthRates = {
      agents: 12.5,
      messages: 8.3,
      requests: 15.7
    };
    return baseGrowthRates[type as keyof typeof baseGrowthRates] || 0;
  };

  const formatUptime = (seconds: number): string => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (days > 0) return `${days}d ${hours}h`;
    if (hours > 0) return `${hours}h ${minutes}m`;
    return `${minutes}m`;
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'performance': return 'text-green-400';
      case 'business': return 'text-cyan-400';
      case 'operations': return 'text-purple-400';
      case 'security': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'performance': return Activity;
      case 'business': return DollarSign;
      case 'operations': return Users;
      case 'security': return AlertCircle;
      default: return BarChart3;
    }
  };

  useEffect(() => {
    fetchAnalytics();
    
    // Set up real-time updates
    const interval = setInterval(fetchAnalytics, 30000); // Refresh every 30 seconds
    return () => clearInterval(interval);
  }, []);

  if (loading && !analyticsData) {
    return (
      <div className="min-h-screen bg-black text-white p-6 flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="w-8 h-8 text-cyan-400 animate-spin mx-auto mb-4" />
          <p className="text-lg text-cyan-400">Loading Analytics Engine...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-black text-white p-6 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-8 h-8 text-red-400 mx-auto mb-4" />
          <p className="text-lg text-red-400 mb-4">Failed to load analytics data</p>
          <p className="text-gray-400 mb-4">{error}</p>
          <button
            onClick={fetchAnalytics}
            className="px-4 py-2 bg-cyan-600/20 border border-cyan-500/30 text-cyan-300 rounded-lg hover:bg-cyan-600/30"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black text-white p-6">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
              Analytics Engine
            </h1>
            <p className="text-lg text-gray-400">Real-time business intelligence and performance analytics</p>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 px-4 py-2 bg-gray-900/40 rounded-lg border border-gray-700/30">
              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'} animate-pulse`} />
              <span className="text-sm font-mono">
                {isConnected ? 'LIVE DATA' : 'OFFLINE'}
              </span>
            </div>
            
            <button
              onClick={fetchAnalytics}
              disabled={loading}
              className="p-2 text-gray-400 hover:text-cyan-400 rounded-lg hover:bg-gray-800/60 disabled:opacity-50"
            >
              <RefreshCw className={`w-5 h-5 ${loading ? 'animate-spin' : ''}`} />
            </button>
          </div>
        </div>
      </motion.div>

      {/* Key Insights Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {insights.map((insight, index) => {
          const IconComponent = getCategoryIcon(insight.category);
          
          return (
            <motion.div
              key={insight.id}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
              className="bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30 hover:border-cyan-400/30 transition-colors"
            >
              <div className="flex items-center justify-between mb-4">
                <div className={`p-3 rounded-lg bg-black/40`}>
                  <IconComponent className={`w-6 h-6 ${getCategoryColor(insight.category)}`} />
                </div>
                <div className={`text-sm font-mono ${
                  insight.trend === 'up' ? 'text-green-400' :
                  insight.trend === 'down' ? 'text-red-400' : 'text-gray-400'
                }`}>
                  {insight.change > 0 ? '+' : ''}{insight.change.toFixed(1)}%
                </div>
              </div>
              
              <div>
                <h3 className="text-2xl font-bold text-white mb-1">{insight.value}</h3>
                <p className="text-sm text-gray-400">{insight.title}</p>
                <span className={`text-xs ${getCategoryColor(insight.category)} uppercase font-semibold`}>
                  {insight.category}
                </span>
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* System Health Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.4 }}
          className="bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30"
        >
          <h2 className="text-xl font-bold text-cyan-400 mb-6 flex items-center">
            <Activity className="w-5 h-5 mr-2" />
            System Performance
          </h2>
          
          {analyticsData && (
            <div className="space-y-4">
              <div className="flex items-center justify-between p-4 bg-black/40 rounded-lg border border-gray-700/50">
                <span className="text-gray-300">Total Requests</span>
                <span className="text-white font-mono">{analyticsData?.summary?.total_orders?.toLocaleString() || '0'}</span>
              </div>
              
              <div className="flex items-center justify-between p-4 bg-black/40 rounded-lg border border-gray-700/50">
                <span className="text-gray-300">Active Agent Sessions</span>
                <span className="text-green-400 font-mono">{analyticsData?.summary?.active_campaigns || 0}</span>
              </div>
              
              <div className="flex items-center justify-between p-4 bg-black/40 rounded-lg border border-gray-700/50">
                <span className="text-gray-300">System Uptime</span>
                <span className="text-blue-400 font-mono">99.9%</span>
              </div>
              
              <div className="flex items-center justify-between p-4 bg-black/40 rounded-lg border border-gray-700/50">
                <span className="text-gray-300">Error Rate</span>
                <span className="text-green-400 font-mono">0.1%</span>
              </div>
            </div>
          )}
        </motion.div>

        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.5 }}
          className="bg-gray-900/40 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30"
        >
          <h2 className="text-xl font-bold text-cyan-400 mb-6 flex items-center">
            <Target className="w-5 h-5 mr-2" />
            Business Intelligence
          </h2>
          
          <div className="space-y-4">
            <div className="p-4 bg-black/40 rounded-lg border border-gray-700/50">
              <h3 className="font-medium text-white mb-2">Message Processing</h3>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Total Messages Processed</span>
                <span className="text-cyan-400 font-mono">{analyticsData?.summary?.total_orders || 0}</span>
              </div>
            </div>

            <div className="p-4 bg-black/40 rounded-lg border border-gray-700/50">
              <h3 className="font-medium text-white mb-2">System Health Status</h3>
              <div className="flex items-center justify-between text-sm">
                <span className="text-gray-400">Overall Health</span>
                <span className={`font-mono capitalize text-green-400`}>
                  Excellent
                </span>
              </div>
            </div>

            <div className="p-4 bg-black/40 rounded-lg border border-gray-700/50">
              <h3 className="font-medium text-white mb-2">Operational Insights</h3>
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full" />
                  <span className="text-gray-300">Agent orchestration active</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-cyan-400 rounded-full" />
                  <span className="text-gray-300">Real-time monitoring enabled</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-400 rounded-full" />
                  <span className="text-gray-300">Performance optimization active</span>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
}