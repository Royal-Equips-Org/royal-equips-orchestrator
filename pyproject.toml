[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "royal-equips-orchestrator"
version = "0.1.0"
description = "AI-powered e-commerce orchestration platform"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
dependencies = [
    "flask>=3.0",
    "flask-cors>=6.0",
    "flask-socketio>=5.4",
    "eventlet>=0.33",
    "flasgger>=0.9.7.1",
    "gunicorn>=21.2",
    "requests>=2.31",
    "tenacity>=8.2",
    "python-dotenv>=1.0",
    "openai>=1.0",
    "psutil>=5.9",
    "redis>=5.0",
    "prometheus-client>=0.20",
    "PyGithub>=1.59",
    "bandit>=1.7",
    "pip-audit>=2.6",
    "jinja2>=3.1",
    # Royal EQ MCP dependencies
    "modelcontextprotocol>=1.0.0",
    "httpx>=0.26.0",
    "pydantic>=2.5.0",
    "google-cloud-bigquery>=3.13.0",
    "supabase>=2.0.0",
    "gitpython>=3.1.40",
]

[project.scripts]
royal-mcp = "royal_mcp:main"

[project.optional-dependencies]
dev = [
    "ruff>=0.4.0",
    "black>=24.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx[ws]>=0.26.0",
    "bandit[toml]>=1.7.0",
    "vulture>=2.7",
    "coverage[toml]>=7.3.0",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "T20", # flake8-print
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # assert usage (allowed in tests)
    "ANN001", # missing function argument type annotation
    "ANN204", # missing return type annotation for special method
    "ANN401", # any annotation
    "T20",    # print statements (allowed for now)
    "S110",   # try-except-pass (allowed for now)
    "S112",   # try-except-continue (allowed for now)
    "N999",   # invalid module name (project structure)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["S101", "ANN", "T20"]  # Allow assert, no type annotations in tests

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["orchestrator"]
known_third_party = [
    "flask", "gunicorn", "requests", "jinja2", "tenacity", "dotenv", 
    "openai", "github", "redis", "prometheus_client", "bandit", "pytest"
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient for existing code
ignore_missing_imports = true  # Ignore missing stubs
show_error_codes = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "-v",
    "--tb=short", 
    "--strict-markers",
    "--strict-config",
    "--cov=royal_mcp",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=70"
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests",
    "external: Tests requiring external services"
]

[tool.coverage.run]
source = ["royal_mcp"]
omit = [
    "tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.bandit]
exclude_dirs = ["tests", "test_*.py", "*_test.py"]
skips = ["B101"]  # Skip assert_used test

[tool.vulture]
exclude = ["tests/", "migrations/"]
ignore_decorators = ["@app.route", "@pytest.fixture"]
ignore_names = ["_*"]
make_whitelist = true
min_confidence = 80
paths = ["royal_mcp/", "api/", "app/", "orchestrator/"]
sort_by_size = true